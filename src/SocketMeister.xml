<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketMeister</name>
    </assembly>
    <members>
        <member name="T:SocketMeister.ServiceStatus">
            <summary>
            Status of a socket service
            </summary>
        </member>
        <member name="F:SocketMeister.ServiceStatus.Stopped">
            <summary>
            Service is stopped
            </summary>
        </member>
        <member name="F:SocketMeister.ServiceStatus.Starting">
            <summary>
            Service is starting
            </summary>
        </member>
        <member name="F:SocketMeister.ServiceStatus.Started">
            <summary>
            Service is started
            </summary>
        </member>
        <member name="F:SocketMeister.ServiceStatus.Stopping">
            <summary>
            Service is stopping
            </summary>
        </member>
        <member name="T:SocketMeister.SeverityType">
            <summary>
            Severity of a trace event
            </summary>
        </member>
        <member name="F:SocketMeister.SeverityType.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:SocketMeister.SeverityType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:SocketMeister.SeverityType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.MessageTypes">
            <summary>
            Internal message types
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.Unknown">
            <summary>
            Unknown message type, usually associated with an error
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.Message">
            <summary>
            Basic message.
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.RequestMessage">
            <summary>
            Request (expecting a response)
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.ResponseMessage">
            <summary>
            Response to a client request
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.ServerStoppingMessage">
            <summary>
            Server is shutting down
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.ClientDisconnectMessage">
            <summary>
            Client is disconnecting
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.PollRequest">
            <summary>
            Clients sent poll requests to determine if a connection is alive
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageTypes.PollResponse">
            <summary>
            Server sends a poll response when a poll request is received from a client
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.ParameterTypes">
            <summary>
            Data types which are supported for parameters sent with messages.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.SendReceiveStatus">
            <summary>
            Status of a SendReceive operation
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.SendReceiveStatus.Unsent">
            <summary>
            Message has not been sent or is flagged to resent (because socket connection failed)
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.SendReceiveStatus.InProgress">
            <summary>
            Message is in progress
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.SendReceiveStatus.ResponseReceived">
            <summary>
            Response has been received
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.SendReceiveStatus.Timeout">
            <summary>
            Timeout occured.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.MessageEngine">
            <summary>
            This is the core engine for creating bytes to send down a socket and to receive bytes from a socket.
            </summary>
            <summary>
            This is the core engine for creating bytes to send down a socket and to receive bytes from a socket.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.MessageEngine.CLZF2">
            <summary>
            Improved C# LZF Compressor, a very small data compression library. The compression algorithm is extremely fast.
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.BUFFER_SIZE_ESTIMATE">
            <summary>
            Multiple of input size used to estimate work/output buffer size.
            Larger values increase initial memory usage but potentially reduces number of allocations.
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.HLOG">
            <summary>
            Size of hashtable is 2^HLOG bytes. 
            Decompression is independent of the hash table size.
            The difference between 15 and 14 is very small
            for small blocks (and 14 is usually a bit faster).
            For a low-memory/faster configuration, use HLOG == 13;
            For best compression, use 15 or 16 (or more, up to 22).
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.HashTable">
            <summary>
            Hashtable, that can be allocated only once.
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.locker">
            <summary>
            Lock object for access to hashtable so that we can keep things thread safe.
            Still up to the caller to make sure any shared outputBuffer use is thread safe.
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[])">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <returns>Compressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[],System.Int32)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="inputLength">Length of data in inputBytes to decompress.</param>
            <returns>Compressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[],System.Byte[]@)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <param name="inputLength">Length of data in inputBytes.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[])">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <returns>Decompressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="inputLength">Length of data in inputBytes to decompress.</param>
            <returns>Decompressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[],System.Byte[]@)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <param name="inputLength">Length of data in inputBytes.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.lzf_compress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Compresses the data using LibLZF algorithm.
            </summary>
            <param name="input">Reference to the data to compress.</param>
            <param name="output">Reference to a buffer which will contain the compressed data.</param>
            <param name="inputLength">Length of input bytes to process.</param>
            <returns>The size of the compressed archive in the output buffer.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.lzf_decompress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Decompresses the data using LibLZF algorithm.
            </summary>
            <param name="input">Reference to the data to decompress.</param>
            <param name="output">Reference to a buffer which will contain the decompressed data.</param>
            <param name="inputLength">Length of input bytes to process.</param>
            <returns>The size of the decompressed archive in the output buffer.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.GenerateSendBytes(SocketMeister.Messages.IMessage,System.Boolean)">
            <summary>
            Generate send bytes for a transmit operation.
            </summary>
            <param name="SendObject">Object to be sent</param>
            <param name="Compress">Compress the data</param>
            <returns>Byte array of the data to be sent</returns>
        </member>
        <member name="P:SocketMeister.Messages.MessageEngine.MessageType">
            <summary>
            The type of message. 
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.Reset">
            <summary>
            Resets the envelope for a fresh receive operation. Warning: should not be done in the middle of a receive operation.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.ClientDisconnectMessage">
            <summary>
            Sent when a client is disconnecting
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.IMessage">
            <summary>
            Interface for internal messages, sent between socket clients and the socket server. Internal messages are not visible outside the socket library.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.IMessage.MessageType">
            <summary>
            Type of message
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.IMessage.SendReceiveStatus">
            <summary>
            Status of a 'SendRequest()' operation, used only on the SocketClient, to track: If messages have been sent, a response has been received, or an error/timeout.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.IMessage.TimeoutMilliseconds">
            <summary>
            Number of milliseconds to wait before a timeout will occur.
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.IMessage.AppendBytes(System.IO.BinaryWriter)">
            <summary>
            Mandatory method to append binary data to the IMessage object,
            </summary>
            <param name="Writer"></param>
        </member>
        <member name="T:SocketMeister.Messages.Message">
            <summary>
            A basic message
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.Message.RemoteClient">
            <summary>
            Only populated for messages received on the server. This is the remote client which sent the message
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.Message.#ctor(System.Object[],System.Int32)">
            <summary>
            RequestMessage constructor
            </summary>
            <param name="parameters">Array of parameters to send with the request. There must be at least 1 parameter.</param>
            <param name="timeoutMilliseconds">The maximum number of milliseconds to wait for a response before timing out.</param>
        </member>
        <member name="P:SocketMeister.Messages.Message.Parameters">
            <summary>
            Parameters provided with this request
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageBase.SendReceiveCompleteEvent">
            <summary>s
            Cross threading locking mechanism while waiting for an asynchronous socket send/receive to complete
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageBase.TimeoutMilliseconds">
            <summary>
            Number of milliseconds to wait before a timeout will occur.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.PollRequest">
            <summary>
            Internal Message: Socket client regulary sends a poll request to the server to check that the server is alive.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.PollResponse">
            <summary>
            Internal Message: Socket server sends a response to a 'PollRequest' message to indicate (to the client) that the server is alive.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.RequestMessage">
            <summary>
            A request, sent from socket client to socket server. A response is expected and will cause problems if it is not sent.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.RequestMessage.RemoteClient">
            <summary>
            The remote client which sent this RequestMessage (value null on SocketClient)
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.RequestMessage.#ctor(System.Object[],System.Int32,System.Boolean)">
            <summary>
            RequestMessage constructor
            </summary>
            <param name="parameters">Array of parameters to send with the request. There must be at least 1 parameter.</param>
            <param name="timeoutMilliseconds">The maximum number of milliseconds to wait for a response before timing out.</param>
            <param name="isLongPolling">The maximum number of milliseconds to wait for a response before timing out.</param>
        </member>
        <member name="P:SocketMeister.Messages.RequestMessage.Parameters">
            <summary>
            Parameters provided with this request
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.RequestMessage.IsLongPolling">
            <summary>
            True is this request is long polling on the server side. Long polling requests will be closed immediately in the event of a close from either the client or server side.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.RequestMessage.RequestId">
            <summary>
            Identifier assigned to this request when it was created (usually when created at the client)
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.ResponseMessage.#ctor(System.IO.BinaryReader)">
            <summary>
            Fastest was to build this is to create it directly from the SocketEnvelope buffer.
            </summary>
            <param name="reader">Binary Reader</param>
        </member>
        <member name="P:SocketMeister.Messages.ResponseMessage.RequestId">
            <summary>
            The request that this response refers to
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.ServerStoppingMessage.#ctor(System.IO.BinaryReader)">
            <summary>
            Fastest was to build this is to create it directly from the SocketEnvelope buffer.
            </summary>
            <param name="reader">Binary Reader</param>
        </member>
        <member name="P:SocketMeister.Messages.ServerStoppingMessage.MaxWaitMilliseconds">
            <summary>
            The maximum number of milliseconds the client should wait for open requests to be completed. The server will not send back responses for open requests after this time.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient">
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient.OpenRequestMessages">
            <summary>
            Threadsafe list of open request messages, which we are waiting for a response from the socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.OpenRequestMessages.Count">
            <summary>
            Number of open items.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.OpenRequestMessages.ResetToUnsent">
            <summary>
            Resets all messages which do not have a response, to 'Unsent'. The locks on all items are released so unsent items can be resent when a connection is reestablished.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient.SocketAsyncEventArgsPool">
            <summary>
            Based on example from http://msdn2.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs.socketasynceventargs.aspx
            Represents a collection of reusable SocketAsyncEventArgs objects.  
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.SocketAsyncEventArgsPool.pool">
            <summary>
            Pool of SocketAsyncEventArgs.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            Initializes the object pool to the specified size.
            </summary>
            <param name="Capacity">Maximum number of SocketAsyncEventArgs objects the pool can hold.</param>
        </member>
        <member name="M:SocketMeister.SocketClient.SocketAsyncEventArgsPool.Pop">
            <summary>
            Removes a SocketAsyncEventArgs instance from the pool.
            </summary>
            <returns>SocketAsyncEventArgs removed from the pool.</returns>
        </member>
        <member name="M:SocketMeister.SocketClient.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Add a SocketAsyncEventArg instance to the pool. 
            </summary>
            <param name="item">SocketAsyncEventArgs instance to add to the pool.</param>
        </member>
        <member name="T:SocketMeister.SocketClient.ConnectionStatuses">
            <summary>
            A SocketClient's connection status to a SocketServer.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Disconnected">
            <summary>
            Socket is disconnected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Connecting">
            <summary>
            Socket is attempting to connect.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Connected">
            <summary>
            Socket is connected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Disconnecting">
            <summary>
            Socket is disconnecting;
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient.ConnectionStatusChangedEventArgs">
            <summary>
            Information provided when a SocketClient connection to a socket server changes status
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.ConnectionStatusChangedEventArgs.#ctor(SocketMeister.SocketClient.ConnectionStatuses)">
            <summary>
            Default constructor
            </summary>
            <param name="status">The status of the socket</param>
        </member>
        <member name="M:SocketMeister.SocketClient.ConnectionStatusChangedEventArgs.#ctor(SocketMeister.SocketClient.ConnectionStatuses,System.String,System.UInt16)">
            <summary>
            Default constructor
            </summary>
            <param name="status">The status of the socket</param>
            <param name="iPAddress">Destination TCP/IP Port.</param>
            <param name="port"></param>
        </member>
        <member name="P:SocketMeister.SocketClient.ConnectionStatusChangedEventArgs.IPAddress">
            <summary>
            If connected, the IP Address which the socket is connected to.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.ConnectionStatusChangedEventArgs.Port">
            <summary>
            The port which the socket is connected to.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.ConnectionStatusChangedEventArgs.Status">
            <summary>
            The connection status to the remote socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.ConnectionStatusChangedEventArgs.StatusDescription">
            <summary>
            Description of the connection status.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient.MessageReceivedEventArgs">
            <summary>
            Values provided when a message is received from the socket server. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.MessageReceivedEventArgs.Parameters">
            <summary>
            The parameters provided with the message.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.CLIENT_SEND_EVENT_ARGS_POOL_SIZE">
            <summary>
            The number of simultaneous send operations which can take place. Value should be between 2 and 15
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.DISCONNECT_AFTER_NO_POLL_RESPONSE_SECONDS">
            <summary>
            If a poll response has not been received from the server after a number of seconds, the socketet client will be disconnected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.DONT_RECONNECT_DELAY_AFTER_SHUTDOWN">
            <summary>
            When a shutdown occurs, particularly because of network failure or server shutdown, delay attempting to reconnect to that server, giving the server some time to complete it's shutdown process.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.POLLING_FREQUENCY">
            <summary>
            The frequency, in seconds, that this client will poll the server, to ensure the socket is alive.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.SEND_RECEIVE_BUFFER_SIZE">
            <summary>
            The buffer size to use for sending and receiving data. Note: This value is also used by the 'SocketServer' class.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.ConnectionStatusChanged">
            <summary>
            Event raised when a status of a socket connection has changed
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.TraceEventRaised">
            <summary>
            Trace message raised from this socket client.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.MessageReceived">
            <summary>
            Event raised whenever a message is received from the server.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint})">
            <summary>
            Constructor
            </summary>
            <param name="endPoints">Collection of endpoints that are available to connect to</param>
        </member>
        <member name="M:SocketMeister.SocketClient.Dispose">
            <summary>
            Dispose of the class
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the class
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:SocketMeister.SocketClient.ConnectionStatus">
            <summary>
            The connection status of the socket client
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.LastPollResponse">
            <summary>
            The last time a polling response was received from the socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.NextPollRequest">
            <summary>
            The next time this socket client should attempt to poll the socket server.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.DisconnectSocket">
            <summary>
            Disconnect the socket. Note: This is performed in the background.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.BgConnectToServer">
            <summary>
            Background process which creates a connection with one of the servers specified
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.BgPollServer">
            <summary>
            Background process which polls the server to determine if the socket is alive
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.ProcessConnect(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Connect operation has completed
            </summary>
            <param name="sender">Sending Socket</param>
            <param name="e">Socket Arguments</param>
        </member>
        <member name="M:SocketMeister.SocketClient.Stop">
            <summary>
            Stops the client.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.SendRequest(System.Object[],System.Int32,System.Boolean)">
            <summary>
            Send a request to the server and wait for a response. 
            </summary>
            <param name="parameters">Array of parameters to send with the request</param>
            <param name="timeoutMilliseconds">Maximum number of milliseconds to wait for a response from the server</param>
            <param name="isLongPolling">If the request is long polling on the server mark this as true and the request will be cancelled instantly when a disconnect occurs</param>
            <returns>Nullable array of bytes which was returned from the socket server</returns>
        </member>
        <member name="M:SocketMeister.SocketClient.ProcessReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            A block of data has been received through the socket. It may contain part of a message, a message, or multiple messages. Process the incoming bytes and when a full message has been received, process the complete message.
            </summary>
            <param name="sender">Sending Socket</param>
            <param name="e">Socket Arguments</param>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.String,SocketMeister.SeverityType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message describing the trace event</param>
            <param name="severity">Severity of the trace event.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.String,SocketMeister.SeverityType,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message describing the trace event</param>
            <param name="severity">Severity of the trace event.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
            <param name="source">Source of the trace event.</param>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.Exception,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="exception">Exception which occured.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="exception">Exception which occured.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
            <param name="source">Source of the trace event.</param>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.EventId">
            <summary>
            Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.Message">
            <summary>
            Message describing the trace event
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.Severity">
            <summary>
            Severity of the trace event.
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.Source">
            <summary>
            Optional source of the trace event.
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.StackTrace">
            <summary>
            Optional stack trace information.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketEndPoint">
            <summary>
            Client Socket to a SocketServer end point
            </summary>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="iPAddress">IP Address of the server to connect to</param>
            <param name="port">Port number of the socket listener to connect to</param>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.Dispose">
            <summary>
            Dispose of the class
            </summary>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.Dispose(System.Boolean)">
            <summary>
            Dispose of the class
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.DontReconnectUntil">
            <summary>
            Used to delay reconnecting to a server after a server has disconnected or a socket has failed to a server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.IPAddress">
            <summary>
            IP Address of the server to connect to
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.IPEndPoint">
            <summary>
            IPEndpoint
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.Port">
            <summary>
            Port number of the socket listener to connect to
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.Socket">
            <summary>
            TCP Socket in use for the current destination.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.CloseSocket">
            <summary>
            Closes the socket
            </summary>
        </member>
        <member name="T:SocketMeister.PolicyServer">
            <summary>
            Lightweight TCP server which listens on port 943 for policy file requests from Silverlight clients. Policy file describes which ports between 4502-4534 can be used by Silverlight.
            </summary>
        </member>
        <member name="T:SocketMeister.PolicyServer.PolicyRequestReceivedEventArgs">
            <summary>
            Raised whenever a policy request is received
            </summary>
        </member>
        <member name="P:SocketMeister.PolicyServer.PolicyRequestReceivedEventArgs.EndPoint">
            <summary>
            The end point (client) requesting the policy file
            </summary>
        </member>
        <member name="T:SocketMeister.PolicyServer.ServerStatusEventArgs">
            <summary>
            Status of a socket service.
            </summary>
        </member>
        <member name="M:SocketMeister.PolicyServer.ServerStatusEventArgs.#ctor(SocketMeister.ServiceStatus)">
            <summary>
            Constructor
            </summary>
            <param name="status">Current status of the service</param>
        </member>
        <member name="P:SocketMeister.PolicyServer.ServerStatusEventArgs.Status">
            <summary>
            Execution status of the service.
            </summary>
        </member>
        <member name="E:SocketMeister.PolicyServer.TraceEventRaised">
            <summary>
            Trace message raised from within SocketMeister.
            </summary>
        </member>
        <member name="E:SocketMeister.PolicyServer.PolicyRequestReceived">
            <summary>
            A request for the policy file was received.
            </summary>
        </member>
        <member name="E:SocketMeister.PolicyServer.SocketServiceStatusChanged">
            <summary>
            The status of the socket server changed. Statuses include stating, started, stopping and stopped.
            </summary>
        </member>
        <member name="E:SocketMeister.PolicyServer.UnknownRequestReceived">
            <summary>
            An unknown request was received. Port 943 is expecting ONLY policy requests.
            </summary>
        </member>
        <member name="M:SocketMeister.PolicyServer.#ctor">
            <summary>
            PolicyServer Constructor. The policy server will connect to all network interfaces on port 943
            </summary>
        </member>
        <member name="P:SocketMeister.PolicyServer.IPAddress">
            <summary>
            The IP address being used.
            </summary>
        </member>
        <member name="P:SocketMeister.PolicyServer.Status">
            <summary>
            The current status of the sockted server. Statuses include Stopped, Starting, Started and Stopping
            </summary>
        </member>
        <member name="M:SocketMeister.PolicyServer.Start">
            <summary>
            Start the socket server. This is a background operation. Your code can (optionally) poll the 'ServiceStatus' property or catch the 'SocketServiceStatusChanged' Event.
            </summary>
        </member>
        <member name="M:SocketMeister.PolicyServer.Stop">
            <summary>
            Stop the socket server. This is a background operation. Your code can (optionally) poll the 'ServiceStatus' property or catch the 'SocketServiceStatusChanged' Event.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer">
            <summary>
            TCP/IP socket server which listens for client connections and raises events when messages are received
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.Client">
            <summary>
            Remote client which has connected to the socket server
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ClientId">
            <summary>
            Unique GUID assigned to each client
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ClientSocket">
            <summary>
            Socket which the client is transmitting data on.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ConnectTimestamp">
            <summary>
            Date and time which the client connected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketServer.Client.ReceiveBuffer">
            <summary>
            Byte array to directly receive data from the socket. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ReceiveEnvelope">
            <summary>
            Class which processes raw data directly from the socket and converts into usable messages.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.Client.SendMessage(System.Object[],System.Int32)">
            <summary>
            Send a message to this client
            </summary>
            <param name="parameters">Parameters to send to the client.</param>
            <param name="timeoutMilliseconds">Number of milliseconds to attempt to send the message before throwing a TimeoutException.</param>
        </member>
        <member name="E:SocketMeister.SocketServer.Clients.ClientConnected">
            <summary>
            Event raised when a client connects to the socket server (Raised in a seperate thread)
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.Clients.ClientDisconnected">
            <summary>
            Event raised when a client disconnects from the socket server (Raised in a seperate thread)
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.Clients.TraceEventRaised">
            <summary>
            Raised when an exception occurs.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Clients.Count">
            <summary>
            Total number of syschronous and asynchronous clients connected
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.Clients.ToList">
            <summary>
            Returns a list of clients which are connected to the socket server
            </summary>
            <returns>List of clients</returns>
        </member>
        <member name="F:SocketMeister.SocketServer.MAX_WAIT_FOR_CLIENT_DISCONNECT_WHEN_STOPPING">
            <summary>
            The maximum number of milliseconds to wait for clients to disconnect whien stopping the socket server
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.ClientConnected">
            <summary>
            Event raised when a client connects to the socket server (Raised in a seperate thread)
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.ClientsChanged">
            <summary>
            Event raised when when there is a change to the clients connected to the socket server
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.ClientDisconnected">
            <summary>
            Event raised when a client disconnects from the socket server (Raised in a seperate thread)
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.TraceEventRaised">
            <summary>
            Raised when an trace log event has been raised.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.ListenerStateChanged">
            <summary>
            Reaised when the status of the socket listener changes.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.MessageReceived">
            <summary>
            Raised when a message is received from a client.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.RequestReceived">
            <summary>
            Raised when a request message is received from a client. A response can be provided which will be returned to the client.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="port">Port that this socket server will listen on</param>
            <param name="enableCompression">Enable compression on message data</param>
        </member>
        <member name="M:SocketMeister.SocketServer.Dispose">
            <summary>
            Dispose this class.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.EndPoint">
            <summary>
            The IP Address and Port that this socket server is using to communicate (e.g. 10.200.50.25:6000).
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Status">
            <summary>
            Status of the socket listener
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.RequestsInProgress">
            <summary>
            The number of client requests currently being executed.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.BroadcastMessage(System.Object[],System.Int32)">
            <summary>
            Send a message to all connected clients. Exceptions will not halt this process, but generate 'ExceptionRaised' events. 
            </summary>
            <param name="parameters">Parameters to send with the message</param>
            <param name="timeoutMilliseconds">Number of milliseconds to wait before timing out</param>
        </member>
        <member name="P:SocketMeister.SocketServer.ClientCount">
            <summary>
            Number of clients connected to the socket server.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.GetClients">
            <summary>
            Returns a list of clients which are connected to the socket server
            </summary>
            <returns>List of clients</returns>
        </member>
        <member name="M:SocketMeister.SocketServer.Start">
            <summary>
            Starts the socket server. It will begin listening for incoming connections.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.Stop">
            <summary>
            Sends a message to all clients to disconnect, waits for in progress requests to finish, then stops the socket server. 
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.ClientConnectedEventArgs">
            <summary>
            Event raised when a client connects to the socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.ClientConnectedEventArgs.Client">
            <summary>
            The client which connected
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.ClientsChangedEventArgs">
            <summary>
            Event raised when there is a change to the clients connected to the socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.ClientsChangedEventArgs.Count">
            <summary>
            The numb er of clients connected to the socket server
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.ClientDisconnectedEventArgs">
            <summary>
            Event raised when a client disconnects from the socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.ClientDisconnectedEventArgs.Client">
            <summary>
            The client which disconnected
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.MessageReceivedEventArgs">
            <summary>
            Values provided when a message is received from a client. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.MessageReceivedEventArgs.Client">
            <summary>
            The client which initiated the message.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.MessageReceivedEventArgs.Parameters">
            <summary>
            The parameters provided with the message.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.RequestReceivedEventArgs">
            <summary>
            Values provided when a request is received from a client. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.RequestReceivedEventArgs.Response">
            <summary>
            The byte array which is to be returned to the client. Null is returned if a 'Response' value is not provided when processing the 'RequestReceived' event.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.ServerStatusEventArgs">
            <summary>
            Status of a socket service.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.ServerStatusEventArgs.#ctor(SocketMeister.ServiceStatus)">
            <summary>
            Constructor
            </summary>
            <param name="status">Current status of the service</param>
        </member>
        <member name="P:SocketMeister.SocketServer.ServerStatusEventArgs.Status">
            <summary>
            Execution status of the service.
            </summary>
        </member>
    </members>
</doc>
