<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketMeister</name>
    </assembly>
    <members>
        <member name="F:SocketMeister.Constants.SEND_RECEIVE_BUFFER_SIZE">
            <summary>
            The buffer size to use for sending and receiving data. Note: This value is also used by the 'SocketServer' class.
            </summary>
        </member>
        <member name="F:SocketMeister.Constants.SEND_RESPONSE_TIMEOUT_SECONDS">
            <summary>
            Number of seconds to wait before generating a timeout error when sending a response to a request.
            </summary>
        </member>
        <member name="F:SocketMeister.Constants.SocketAsyncEventArgsPoolSize">
            <summary>
            The number of simultaneous send operations which can take place. Value should be between 2 and 20
            </summary>
        </member>
        <member name="T:SocketMeister.MessageEngineDeliveryResult">
            <summary>
            Result of an attempt to process a message. This is included in the MessageResponse.
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineDeliveryResult.Success">
            <summary>
            The message was processed successfully
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineDeliveryResult.Stopping">
            <summary>
            The client or server is shutting down. The message was not processed.
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineDeliveryResult.NoMessageReceivedEventListener">
            <summary>
            There is no process listening for 'MessageReceived' events.
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineDeliveryResult.Exception">
            <summary>
            An exception occured while processing the message
            </summary>
        </member>
        <member name="T:SocketMeister.MessageEngineDeliveryStatus">
            <summary>
            The progress of a message from creation to receiving a response.
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineDeliveryStatus.Unsent">
            <summary>
            Message has not been sent or is flagged to resent (because socket connection failed)
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineDeliveryStatus.InProgress">
            <summary>
            Message is in progress
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineDeliveryStatus.ResponseReceived">
            <summary>
            Send operation finished (Could be unsuccessful or successful)
            </summary>
        </member>
        <member name="T:SocketMeister.MessageEngineMessageType">
            <summary>
            Internal message types
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.Unknown">
            <summary>
            Unknown message type, usually associated with an error
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.BroadcastV1">
            <summary>
            Server sends a broadcast
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.MessageV1">
            <summary>
            Message (expecting a response, even a null response is valid). 
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.MessageResponseV1">
            <summary>
            Response to a message
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.ServerStoppingNotificationV1">
            <summary>
            Server is shutting down
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.ClientDisconnectingNotificationV1">
            <summary>
            Client is disconnecting
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.SubscriptionChangesNotificationV1">
            <summary>
            Clients send subscription information to the server. The server updates it's local client details
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.SubscriptionChangesResponseV1">
            <summary>
            Server sends a subscription response when a subscription notification is received from a client
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.PollingRequestV1">
            <summary>
            Clients sent poll requests to determine if a connection is alive
            </summary>
        </member>
        <member name="F:SocketMeister.MessageEngineMessageType.PollingResponseV1">
            <summary>
            Server sends a poll response when a poll request is received from a client
            </summary>
        </member>
        <member name="T:SocketMeister.SeverityType">
            <summary>
            Severity of a trace event
            </summary>
        </member>
        <member name="F:SocketMeister.SeverityType.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:SocketMeister.SeverityType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:SocketMeister.SeverityType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServerStatus">
            <summary>
            Execution status of a service
            </summary>
        </member>
        <member name="F:SocketMeister.SocketServerStatus.Stopped">
            <summary>
            Service is stopped
            </summary>
        </member>
        <member name="F:SocketMeister.SocketServerStatus.Starting">
            <summary>
            Service is starting
            </summary>
        </member>
        <member name="F:SocketMeister.SocketServerStatus.Started">
            <summary>
            Service is started
            </summary>
        </member>
        <member name="F:SocketMeister.SocketServerStatus.Stopping">
            <summary>
            Service is stopping
            </summary>
        </member>
        <member name="T:SocketMeister.TokenAction">
            <summary>
            Action taken with a token
            </summary>
        </member>
        <member name="T:SocketMeister.ValueType">
            <summary>
            Type of value stored in a token
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.BoolValue">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.DateTimeValue">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.DoubleValue">
            <summary>
            Double Type
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.Int16Value">
            <summary>
            Int16
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.Int32Value">
            <summary>
            Int32
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.Int64Value">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.UInt16Value">
            <summary>
            Unsigned Int16
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.UInt32Value">
            <summary>
            Unsigned Int32
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.UInt64Value">
            <summary>
            Unsigned Int64
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.StringValue">
            <summary>
            String
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.ByteValue">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.ByteArrayValue">
            <summary>
            Byte Array
            </summary>
        </member>
        <member name="F:SocketMeister.ValueType.NullValue">
            <summary>
            Null
            </summary>
        </member>
        <member name="T:SocketMeister.TraceEventArgs">
            <summary>
            Events and Exceptions raised for analysis and logging purposes
            </summary>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.String,SocketMeister.SeverityType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message describing the trace event</param>
            <param name="severity">Severity of the trace event.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.String,SocketMeister.SeverityType,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message describing the trace event</param>
            <param name="severity">Severity of the trace event.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
            <param name="source">Source of the trace event.</param>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.Exception,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="exception">Exception which occured.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
        </member>
        <member name="M:SocketMeister.TraceEventArgs.#ctor(System.Exception,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="exception">Exception which occured.</param>
            <param name="eventId">Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).</param>
            <param name="source">Source of the trace event.</param>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.EventId">
            <summary>
            Event identifier for this trace event. Useful if writing this to the Windows Event Log (Or equivalent).
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.Message">
            <summary>
            Message describing the trace event
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.Severity">
            <summary>
            Severity of the trace event.
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.Source">
            <summary>
            Optional source of the trace event.
            </summary>
        </member>
        <member name="P:SocketMeister.TraceEventArgs.StackTrace">
            <summary>
            Optional stack trace information.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.BroadcastV1">
            <summary>
            SocketServer sends broadcasts to clients.
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.BroadcastV1.#ctor(System.String,System.Object[])">
            <summary>
            Broadcast constructor
            </summary>
            <param name="Name">Optional Name/Tag/Identifier for the broadcast.</param>
            <param name="Parameters">Array of parameters to send with the broadcast. There must be at least 1 parameter.</param>
        </member>
        <member name="P:SocketMeister.Messages.BroadcastV1.Parameters">
            <summary>
            Parameters provided with this broadcast
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.BroadcastV1.Name">
            <summary>
            Optional Name/Tag/Identifier given to the broadcast
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.TokenChangesRequestV1">
            <summary>
            Internal Message: Response when tokens are changed. Contains ChangeIds of token changes.
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.TokenChangesRequestV1.#ctor(System.IO.BinaryReader)">
            <summary>
            Fastest was to build this is to create it directly from the SocketEnvelope buffer.
            </summary>
            <param name="Reader">Binary Reader</param>
        </member>
        <member name="T:SocketMeister.Messages.TokenChangesResponseV1">
            <summary>
            Internal Message: COntains information related to changed tokens.
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.TokenChangesResponseV1.#ctor(System.IO.BinaryReader)">
            <summary>
            Fastest was to build this is to create it directly from the SocketEnvelope buffer.
            </summary>
            <param name="Reader">Binary Reader</param>
        </member>
        <member name="T:SocketMeister.Messages.MessageEngine">
            <summary>
            This is the core engine for creating bytes to send down a socket and to receive bytes from a socket.
            </summary>
            <summary>
            This is the core engine for creating bytes to send down a socket and to receive bytes from a socket.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.MessageEngine.CLZF2">
            <summary>
            Improved C# LZF Compressor, a very small data compression library. The compression algorithm is extremely fast.
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.BUFFER_SIZE_ESTIMATE">
            <summary>
            Multiple of input size used to estimate work/output buffer size.
            Larger values increase initial memory usage but potentially reduces number of allocations.
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.HLOG">
            <summary>
            Size of hashtable is 2^HLOG bytes. 
            Decompression is independent of the hash table size.
            The difference between 15 and 14 is very small
            for small blocks (and 14 is usually a bit faster).
            For a low-memory/faster configuration, use HLOG == 13;
            For best compression, use 15 or 16 (or more, up to 22).
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.HashTable">
            <summary>
            Hashtable, that can be allocated only once.
            </summary>
        </member>
        <member name="F:SocketMeister.Messages.MessageEngine.CLZF2.locker">
            <summary>
            Lock object for access to hashtable so that we can keep things thread safe.
            Still up to the caller to make sure any shared outputBuffer use is thread safe.
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[])">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <returns>Compressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[],System.Int32)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="inputLength">Length of data in inputBytes to decompress.</param>
            <returns>Compressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[],System.Byte[]@)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Compress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <param name="inputLength">Length of data in inputBytes.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[])">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <returns>Decompressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="inputLength">Length of data in inputBytes to decompress.</param>
            <returns>Decompressed bytes.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[],System.Byte[]@)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Decompress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <param name="inputLength">Length of data in inputBytes.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Lzf_compress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Compresses the data using LibLZF algorithm.
            </summary>
            <param name="input">Reference to the data to compress.</param>
            <param name="output">Reference to a buffer which will contain the compressed data.</param>
            <param name="inputLength">Length of input bytes to process.</param>
            <returns>The size of the compressed archive in the output buffer.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.CLZF2.Lzf_decompress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Decompresses the data using LibLZF algorithm.
            </summary>
            <param name="input">Reference to the data to decompress.</param>
            <param name="output">Reference to a buffer which will contain the decompressed data.</param>
            <param name="inputLength">Length of input bytes to process.</param>
            <returns>The size of the decompressed archive in the output buffer.</returns>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.GenerateSendBytes(SocketMeister.Messages.IMessage,System.Boolean)">
            <summary>
            Generate send bytes for a transmit operation.
            </summary>
            <param name = "SendObject" > Object to be sent</param>
            <param name = "Compress" > Compress the data</param>
            <returns>Byte array of the data to be sent</returns>
        </member>
        <member name="P:SocketMeister.Messages.MessageEngine.MessageType">
            <summary>
            The type of message. 
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.MessageEngine.Reset">
            <summary>
            Resets the envelope for a fresh receive operation. Warning: should not be done in the middle of a receive operation.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.ClientDisconnectingNotificationV1">
            <summary>
            Sent when a client is disconnecting
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.IMessage">
            <summary>
            Interface for internal messages, sent between socket clients and the socket server. Internal messages are not visible outside the socket library.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.IMessage.MessageType">
            <summary>
            Type of message
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.IMessage.Status">
            <summary>
            Status of the message. 
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.IMessage.AppendBytes(System.IO.BinaryWriter)">
            <summary>
            Mandatory method to append binary data to the IMessage object,
            </summary>
            <param name="Writer"></param>
        </member>
        <member name="T:SocketMeister.Messages.PollingRequestV1">
            <summary>
            Internal Message: Socket client regulary sends a poll request to the server to check that the server is alive.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.PollingResponseV1">
            <summary>
            Internal Message: Socket server sends a response to a 'PollRequest' message to indicate (to the client) that the server is alive.
            </summary>
        </member>
        <member name="T:SocketMeister.Messages.MessageV1">
            <summary>
            A message, sent from socket client to socket server. A response is expected and will cause problems if it is not sent.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.RemoteClient">
            <summary>
            The remote client which sent this Message (value null on SocketClient)
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.MessageV1.#ctor(System.Object[],System.Int32,System.Boolean)">
            <summary>
            Message constructor
            </summary>
            <param name="Parameters">Array of parameters to send with the message. There must be at least 1 parameter.</param>
            <param name="TimeoutMilliseconds">The maximum number of milliseconds to wait for a response before timing out.</param>
            <param name="IsLongPolling">The maximum number of milliseconds to wait for a response before timing out.</param>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.Parameters">
            <summary>
            Parameters provided with this message
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.IsLongPolling">
            <summary>
            True is this message is long polling on the server side. Long polling messages will be closed immediately in the event of a close from either the client or server side.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.IsTimeout">
            <summary>
            Whether the Message has timed out
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.MessageId">
            <summary>
            Identifier assigned to this message when it was created
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.TimeoutMilliseconds">
            <summary>
            Number of milliseconds to wait before a timeout will occur.
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.TrySendReceive">
            <summary>
            Whether the method SendReceive(Message Message) should continute trying
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageV1.WaitForResponse">
            <summary>
            Whether a SendReceive process should continue waiting for a response
            </summary>
        </member>
        <member name="P:SocketMeister.Messages.MessageResponseV1.RemoteClient">
            <summary>
            The remote client which sent this Message (value null on SocketClient)
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.MessageResponseV1.#ctor(System.IO.BinaryReader)">
            <summary>
            Fastest was to build this is to create it directly from the SocketEnvelope buffer.
            </summary>
            <param name="Reader">Binary Reader</param>
        </member>
        <member name="P:SocketMeister.Messages.MessageResponseV1.MessageId">
            <summary>
            The message that this response refers to
            </summary>
        </member>
        <member name="M:SocketMeister.Messages.ServerStoppingNotificationV1.#ctor(System.IO.BinaryReader)">
            <summary>
            Fastest was to build this is to create it directly from the SocketEnvelope buffer.
            </summary>
            <param name="Reader">Binary Reader</param>
        </member>
        <member name="P:SocketMeister.Messages.ServerStoppingNotificationV1.MaxWaitMilliseconds">
            <summary>
            The maximum number of milliseconds the client should wait for unresponded messages to be completed. The server will not send back responses for unresponded messages after this time.
            </summary>
        </member>
        <member name="T:SocketMeister.Serializer">
            <summary>
            Serialization routines for SocketMeister
            </summary>
        </member>
        <member name="T:SocketMeister.Serializer.ParameterType">
            <summary>
            Data types which are supported for parameters sent with messages.
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.BoolParam">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.DateTimeParam">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.DoubleParam">
            <summary>
            Double Type
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.Int16Param">
            <summary>
            Int16
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.Int32Param">
            <summary>
            Int32
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.Int64Param">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.UInt16Param">
            <summary>
            Unsigned Int16
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.UInt32Param">
            <summary>
            Unsigned Int32
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.UInt64Param">
            <summary>
            Unsigned Int64
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.StringParam">
            <summary>
            String
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.ByteParam">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.ByteArrayParam">
            <summary>
            Byte Array
            </summary>
        </member>
        <member name="F:SocketMeister.Serializer.ParameterType.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="M:SocketMeister.Serializer.DeserializeParameters(System.Byte[])">
            <summary>
            Deserialize a byte array which was serialized using 'byte[] SerializeParameters(object[] Parameters)' from this class.
            </summary>
            <param name="Data">Binary array</param>
            <returns>A list of parameters</returns>
        </member>
        <member name="M:SocketMeister.Serializer.DeserializeParameters(System.IO.BinaryReader)">
            <summary>
            Deserialize objects embedded with other data. Must have been serialized using 'void SerializeParameters(BinaryWriter BinaryWriter, object[] Parameters)' from this class
            </summary>
            <param name="Reader">Open BinaryReader which is queued exactly to the point where the serialized parameters are encoded.</param>
            <returns>A list of parameters</returns>
        </member>
        <member name="M:SocketMeister.Serializer.SerializeParameters(System.Object[])">
            <summary>
            Serializes an array of parameters 
            </summary>
            <param name="Parameters">Array of objects. Only simple values permitted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:SocketMeister.Serializer.SerializeParameters(System.IO.BinaryWriter,System.Object[])">
            <summary>
            Serializes an array of parameters 
            </summary>
            <param name="Writer">Binary Writer. Serialization will be appended to the BinaryWriter.</param>
            <param name="Parameters">Array of objects. Only simple values permitted</param>
        </member>
        <member name="T:SocketMeister.SocketAsyncEventArgsPool">
            <summary>
            Based on example from http://msdn2.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs.socketasynceventargs.aspx
            Represents a collection of reusable SocketAsyncEventArgs objects.  
            </summary>
        </member>
        <member name="F:SocketMeister.SocketAsyncEventArgsPool._pool">
            <summary>
            Pool of SocketAsyncEventArgs.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketAsyncEventArgsPool.Completed">
            <summary>
            The event used to complete an asynchronous operation.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            Initializes the object pool to the specified size.
            </summary>
            <param name="Capacity">Maximum number of SocketAsyncEventArgs objects the pool can hold.</param>
        </member>
        <member name="M:SocketMeister.SocketAsyncEventArgsPool.Pop">
            <summary>
            Removes a SocketAsyncEventArgs instance from the pool.
            </summary>
            <returns>SocketAsyncEventArgs removed from the pool.</returns>
        </member>
        <member name="M:SocketMeister.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Add a SocketAsyncEventArg instance to the pool. 
            </summary>
            <param name="item">SocketAsyncEventArgs instance to add to the pool.</param>
        </member>
        <member name="T:SocketMeister.SocketClient">
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
            <summary>
            Asynchronous, persistent TCP/IP socket client supporting multiple destinations
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient.ConnectionStatuses">
            <summary>
            A SocketClient's connection status to a SocketServer.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Disconnected">
            <summary>
            Socket is disconnected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Connecting">
            <summary>
            Socket is attempting to connect.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Connected">
            <summary>
            Socket is connected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.ConnectionStatuses.Disconnecting">
            <summary>
            Socket is disconnecting;
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient.MessageReceivedEventArgs">
            <summary>
            Values provided when a message is received from a server. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.MessageReceivedEventArgs.Parameters">
            <summary>
            The parameters provided with the message.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.MessageReceivedEventArgs.Response">
            <summary>
            The byte array which can optionally be returned to the client. Null is returned if a 'Response' value is not provided.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketClient.BroadcastReceivedEventArgs">
            <summary>
            Values provided when a broadcast is received from the socket server. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.BroadcastReceivedEventArgs.Parameters">
            <summary>
            The parameters provided with the message.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.BroadcastReceivedEventArgs.Name">
            <summary>
            Optional Name/Tag/Identifier for the broadcast 
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.DISCONNECT_AFTER_NO_POLL_RESPONSE_SECONDS">
            <summary>
            If a poll response has not been received from the server after a number of seconds, the socket client will be disconnected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.DONT_RECONNECT_DELAY_AFTER_SHUTDOWN">
            <summary>
            When a shutdown occurs, particularly because of network failure or server shutdown, delay attempting to reconnect to that server, giving the server some time to complete it's shutdown process.
            When a shutdown occurs, particularly because of network failure or serveDisconnectr shutdown, delay attempting to reconnect to that server, giving the server some time to complete it's shutdown process.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketClient.POLLING_FREQUENCY">
            <summary>
            The frequency, in seconds, that this client will poll the server, to ensure the socket is alive.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.ConnectionStatusChanged">
            <summary>
            Event raised when the status of a socket connection changes
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.CurrentEndPointChanged">
            <summary>
            Event raised when the current EndPoint channges
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.ExceptionRaised">
            <summary>
            Event raised when an exception occurs
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.MessageReceived">
            <summary>
            Raised when a  message is received from the server. When processing this event, an optional response can be provided which will be returned to the server.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.ServerStopping">
            <summary>
            Event raised when a the server stops
            </summary>
        </member>
        <member name="E:SocketMeister.SocketClient.BroadcastReceived">
            <summary>
            Event raised whenever a broadcast is received from the server.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="EndPoints">Collection of endpoints that are available to connect to</param>
            <param name="EnableCompression">Whether compression will be applied to data.</param>
        </member>
        <member name="M:SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="IPAddress1">IP Address to of the SocketMeister server to connect to</param>
            <param name="Port1">TCP port the server is listening on</param>
            <param name="EnableCompression">Whether compression will be applied to data.</param>
        </member>
        <member name="M:SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="IPAddress1">IP Address to of the first SocketMeister server to connect to</param>
            <param name="Port1">TCP port the first server is listening on</param>
            <param name="IPAddress2">IP Address to of the second SocketMeister server to connect to</param>
            <param name="Port2">TCP port the second server is listening on</param>
            <param name="EnableCompression">Whether compression will be applied to data.</param>
        </member>
        <member name="M:SocketMeister.SocketClient.Dispose">
            <summary>
            Dispose of the class
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.Dispose(System.Boolean)">
            <summary>
            Dispose of the class
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SocketMeister.SocketClient.AddSubscription(System.String)">
            <summary>
            Adds a subscription name to the list of subscriptions. Throws an error if the name (case insensitive) exists.
            </summary>
            <param name="SubscriptionName"></param>
        </member>
        <member name="P:SocketMeister.SocketClient.LastMessageFromServer">
            <summary>
            The last time any contact was received from the server. This includes polling message/responses, instigated intermittently from the client.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.RemoveSubscription(System.String)">
            <summary>
            Removes a subscription name from the list of subscriptions
            </summary>
            <param name="SubscriptionName">Name of the subscription to remove</param>
            <returns>True if the subscription was removed</returns>
        </member>
        <member name="P:SocketMeister.SocketClient.ConnectionStatus">
            <summary>
            The connection status of the socket client
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.CurrentEndPoint">
            <summary>
            The current socket endpoint which the client is using
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.LastPollResponse">
            <summary>
            The last time a polling response was received from the socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.NextPoll">
            <summary>
            The next time this socket client should attempt to poll the socket server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketClient.SubscriptionCount">
            <summary>
            The number of subscriptions for this client
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.DoesSubscriptionNameExist(System.String)">
            <summary>
            Whether a subscription name exists in the list of subscriptions. 
            </summary>
            <param name="SubscriptionName">Name of the subscription (Case insensitive).</param>
            <returns>True if exists, false if the subscription does not exist</returns>
        </member>
        <member name="M:SocketMeister.SocketClient.GetSubscriptions">
            <summary>
            Get a list of subscription names
            </summary>
            <returns>List of subscription names</returns>
        </member>
        <member name="M:SocketMeister.SocketClient.DisconnectSocketGracefully">
            <summary>
            Disconnect the socket gracefully. 
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.CloseSocketWithForce">
            <summary>
            Disconnect the socket. Note: This is performed in the background.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.BgConnectToServer">
            <summary>
            Background process which creates a connection with one of the servers specified
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.ExecuteBackgroundOperations">
            <summary>
            Background process which performas various operations
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.ProcessConnect(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Connect operation has completed
            </summary>
            <param name="sender">Sending Socket</param>
            <param name="e">Socket Arguments</param>
        </member>
        <member name="M:SocketMeister.SocketClient.Stop">
            <summary>
            Stops the client.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketClient.SendMessage(System.Object[],System.Int32,System.Boolean)">
            <summary>
            Send a message to the server and wait for a response. 
            </summary>
            <param name="Parameters">Array of parameters to send with the message</param>
            <param name="TimeoutMilliseconds">Maximum number of milliseconds to wait for a response from the server</param>
            <param name="IsLongPolling">If the message is long polling on the server mark this as true and the message will be cancelled instantly when a disconnect occurs</param>
            <returns>Nullable array of bytes which was returned from the socket server</returns>
        </member>
        <member name="M:SocketMeister.SocketClient.ProcessReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            A block of data has been received through the socket. It may contain part of a message, a message, or multiple messages. Process the incoming bytes and when a full message has been received, process the complete message.
            </summary>
            <param name="sender">Sending Socket</param>
            <param name="e">Socket Arguments</param>
        </member>
        <member name="T:SocketMeister.ExceptionEventArgs">
            <summary>
            Raised when an exception occured.
            </summary>
        </member>
        <member name="M:SocketMeister.ExceptionEventArgs.#ctor(System.Exception,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Exception">Exception which occured.</param>
            <param name="EventId">Event identifier for this exception. Useful if writing this to the Windows Event Log (Or equivalent).</param>
        </member>
        <member name="P:SocketMeister.ExceptionEventArgs.EventId">
            <summary>
            Event identifier for this exception. Useful if writing this to the Windows Event Log.
            </summary>
        </member>
        <member name="P:SocketMeister.ExceptionEventArgs.Exception">
            <summary>
            Exception that occured
            </summary>
        </member>
        <member name="T:SocketMeister.SocketEndPoint">
            <summary>
            Client Socket to a SocketServer end point
            </summary>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="IPAddress">IP Address of the server to connect to</param>
            <param name="Port">Port number of the socket listener to connect to</param>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.Dispose">
            <summary>
            Dispose of the class
            </summary>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.Dispose(System.Boolean)">
            <summary>
            Dispose of the class
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.DontReconnectUntil">
            <summary>
            Used to delay reconnecting to a server after a server has disconnected or a socket has failed to a server.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.IPAddress">
            <summary>
            IP Address of the server to connect to
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.IPEndPoint">
            <summary>
            IPEndpoint
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.Port">
            <summary>
            Port number of the socket listener to connect to
            </summary>
        </member>
        <member name="P:SocketMeister.SocketEndPoint.Socket">
            <summary>
            TCP Socket in use for the current destination.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketEndPoint.RecreateSocket">
            <summary>
            Creates a new socket.
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer">
            <summary>
            TCP/IP socket server which listens for client connections and raises events when messages are received
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.Client">
            <summary>
            Remote client which has connected to the socket server
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ClientId">
            <summary>
            Unique GUID assigned to each client
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ClientSocket">
            <summary>
            Socket which the client is transmitting data on.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ConnectTimestamp">
            <summary>
            Date and time which the client connected.
            </summary>
        </member>
        <member name="F:SocketMeister.SocketServer.Client.ReceiveBuffer">
            <summary>
            Byte array to directly receive data from the socket. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.ReceiveEnvelope">
            <summary>
            Class which processes raw data directly from the socket and converts into usable messages.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Client.SubscriptionCount">
            <summary>
            The number of subscriptions for this client
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.Client.DoesSubscriptionExist(System.String)">
            <summary>
            Whether a subscription exists. 
            </summary>
            <param name="SubscriptionName">Name of the subscription (Case insensitive).</param>
            <returns>True if exists, false if the subscription does not exist</returns>
        </member>
        <member name="M:SocketMeister.SocketServer.Client.GetSubscriptions">
            <summary>
            Get a list of subscription names
            </summary>
            <returns>List of subscription names</returns>
        </member>
        <member name="M:SocketMeister.SocketServer.Client.SendMessage(System.Object[],System.Int32,System.Boolean)">
            <summary>
            Send a message to the client and wait for a response. 
            </summary>
            <param name="Parameters">Array of parameters to send with the message</param>
            <param name="TimeoutMilliseconds">Maximum number of milliseconds to wait for a response from the server</param>
            <param name="IsLongPolling">If the message is long polling on the server mark this as true and the message will be cancelled instantly when a disconnect occurs</param>
            <returns>Nullable array of bytes which was returned from the socket server</returns>
        </member>
        <member name="E:SocketMeister.SocketServer.Clients.ClientConnected">
            <summary>
            Event raised when a client connects to the socket server (Raised in a seperate thread)
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.Clients.ClientDisconnected">
            <summary>
            Event raised when a client disconnects from the socket server (Raised in a seperate thread)
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.Clients.TraceEventRaised">
            <summary>
            Raised when an exception occurs (Raised in a seperate thread)
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Clients.Count">
            <summary>
            Total number of syschronous and asynchronous clients connected
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.Clients.Remove(SocketMeister.SocketServer.Client)">
            <summary>
            Remove a client from the list
            </summary>
            <param name="Client">Client to remove</param>
        </member>
        <member name="M:SocketMeister.SocketServer.Clients.ToList">
            <summary>
            Returns a list of clients which are connected to the socket server
            </summary>
            <returns>List of clients</returns>
        </member>
        <member name="F:SocketMeister.SocketServer.MAX_WAIT_FOR_CLIENT_DISCONNECT_WHEN_STOPPING">
            <summary>
            The maximum number of milliseconds to wait for clients to disconnect whien stopping the socket server
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.ClientConnected">
            <summary>
            Event raised when a client connects to the socket server. Raised in a seperate thread
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.ClientDisconnected">
            <summary>
            Event raised when a client disconnects from the socket server. Raised in a seperate thread
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.StatusChanged">
            <summary>
            Raised when the status of the socket listener changes. Raised in a seperate thread
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.MessageReceived">
            <summary>
            Raised when a  message is received from a client. An optional response can be provided which will be returned to the client. Raised in a seperate thread.
            </summary>
        </member>
        <member name="E:SocketMeister.SocketServer.TraceEventRaised">
            <summary>
            Raised when an trace log event has been raised.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="Port">Port that this socket server will listen on</param>
            <param name="CompressSentData">Enable compression on message data</param>
        </member>
        <member name="P:SocketMeister.SocketServer.EndPoint">
            <summary>
            The IP Address and Port that this socket server is using to communicate (e.g. 10.200.50.25:6000).
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.Status">
            <summary>
            Current status of the SocketServer
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.TotalBytesReceived">
            <summary>
            The total number of bytes which have been received through the socket server since it started
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.TotalBytesSent">
            <summary>
            The total number of bytes which have been sent through the socket server since it started
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.TotalMessagesSent">
            <summary>
            The total number of messages that have been sent through the socket server since it started;
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.TotalMessagesReceived">
            <summary>
            The total number of messages that have been received through the socket server since it started;
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.StopSocketServer">
            <summary>
            Whether the socket service is in the process of stopping.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.Broadcast(System.String,System.Object[])">
            <summary>
            Send a message to all connected clients. Exceptions will not halt this process, but generate 'ExceptionRaised' events. 
            </summary>
            <param name="Name">Optional Name/Tag/Identifier for the broadcast.</param>
            <param name="Parameters">Parameters to send with the message</param>
        </member>
        <member name="M:SocketMeister.SocketServer.BroadcastToSubscribers(System.String,System.Object[])">
            <summary>
            Send a message to all clients subscribing to a subscription name. Exceptions will not halt this process, but generate 'ExceptionRaised' events. 
            </summary>
            <param name="Name">Optional Name/Tag/Identifier for the broadcast.</param>
            <param name="Parameters">Parameters to send with the message</param>
        </member>
        <member name="P:SocketMeister.SocketServer.ClientCount">
            <summary>
            Number of clients connected to the socket server.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.DoSubscribersExist(System.String)">
            <summary>
            Are there any clients subscribing to a subscription name
            </summary>
            <param name="SubscriptionName">Name of the subscription (Case insensitive)</param>
            <returns>true if there is at least one client subscribing to the SubscriptionName</returns>
        </member>
        <member name="M:SocketMeister.SocketServer.GetClients">
            <summary>
            Returns a list of clients which are connected to the socket server
            </summary>
            <returns>List of clients</returns>
        </member>
        <member name="M:SocketMeister.SocketServer.Start">
            <summary>
            Starts the socket server. It will begin listening for incoming connections.
            </summary>
        </member>
        <member name="M:SocketMeister.SocketServer.Stop">
            <summary>
            Sends a message to all clients to disconnect, waits for in progress messages to finish, then stops the socket server. 
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.ClientEventArgs">
            <summary>
            Provided for client specific events.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.ClientEventArgs.Client">
            <summary>
            The client which connected
            </summary>
        </member>
        <member name="T:SocketMeister.SocketServer.MessageReceivedEventArgs">
            <summary>
            Values provided when a request is received from a client. 
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.MessageReceivedEventArgs.Response">
            <summary>
            The byte array which is to be returned to the client. Null is returned if a 'Response' value is not provided when processing the 'MessageReceived' event.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.MessageReceivedEventArgs.Client">
            <summary>
            The client which initiated the message.
            </summary>
        </member>
        <member name="P:SocketMeister.SocketServer.MessageReceivedEventArgs.Parameters">
            <summary>
            The parameters provided with the message.
            </summary>
        </member>
        <member name="T:SocketMeister.TokenChangeCollection">
            <summary>
            Used internally to track token changes to publish
            </summary>
        </member>
        <member name="M:SocketMeister.TokenChangeCollection.FlagAllAfterSocketConnect">
            <summary>
            After a socket connects, all tokens are sent to the other side.
            </summary>
        </member>
        <member name="M:SocketMeister.TokenChangeCollection.Serialize">
            <summary>
            If there are any changes, returns a byte[] array containing the seralized data. If there are no changes, returns null
            </summary>
            <returns></returns>
        </member>
        <member name="T:SocketMeister.TokenCollectionReadOnly">
            <summary>
            Dictionary based collection of tokens. Data is readonly.
            </summary>
        </member>
        <member name="E:SocketMeister.TokenCollectionReadOnly.TokenAdded">
            <summary>
            Raised when a token value was added after synchronization with the master collection. Token is the 'Sender' in the event.
            </summary>
        </member>
        <member name="E:SocketMeister.TokenCollectionReadOnly.TokenChanged">
            <summary>
            Raised when a token value was deleted after synchronization with the master collection. Token is the 'Sender' in the event.
            </summary>
        </member>
        <member name="E:SocketMeister.TokenCollectionReadOnly.TokenDeleted">
            <summary>
            Raised when a token value was changed after synchronization with the master collection. Token is the 'Sender' in the event.
            </summary>
        </member>
        <member name="P:SocketMeister.TokenCollectionReadOnly.Item(System.String)">
            <summary>
            Indexed search returning the token or null, for a given token name.
            </summary>
            <param name="Name">Token requested.</param>
            <returns>Found token or null if not found</returns>
        </member>
        <member name="P:SocketMeister.TokenCollectionReadOnly.Count">
            <summary>
            Number of tokens in the token collection
            </summary>
        </member>
        <member name="M:SocketMeister.TokenCollectionReadOnly.ToList">
            <summary>
            Returns a list of all the tokens in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocketMeister.TokenCollectionReadOnly.ToListOfNames">
            <summary>
            Returns a string list of names
            </summary>
            <returns>List of names</returns>
        </member>
        <member name="T:SocketMeister.Token">
            <summary>
            Value which is automatically synchronised between SocketClient and SocketServer. Multiple Tokens are 
            </summary>
        </member>
        <member name="E:SocketMeister.Token.Changed">
            <summary>
            Raised when the value is changed.
            </summary>
        </member>
        <member name="M:SocketMeister.Token.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Name">Name of the token</param>
        </member>
        <member name="M:SocketMeister.Token.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="Name">Name of the token</param>
            <param name="Value">Value to assign to the token</param>
        </member>
        <member name="P:SocketMeister.Token.Name">
            <summary>
            Readonly name of the token
            </summary>
        </member>
        <member name="P:SocketMeister.Token.Value">
            <summary>
            Value for the token. Supports null, bool, DateTime, double, short, int, long, ushort, uint, ulong, string, byte, byte[]
            </summary>
        </member>
        <member name="P:SocketMeister.Token.ValueType">
            <summary>
            The type of data stored in the value
            </summary>
        </member>
        <member name="M:SocketMeister.Token.Deserialize(System.IO.BinaryReader)">
            <summary>
            Used internally to update the value from the other side 
            </summary>
            <param name="Reader"></param>
        </member>
        <member name="M:SocketMeister.Token.Serialize(System.IO.BinaryWriter)">
            <summary>
            Appends the binary data for this token to an open BinaryWriter
            </summary>
            <param name="Writer"></param>
        </member>
        <member name="T:SocketMeister.TokenCollection">
            <summary>
            Dictionary based collection of tokens. Data is updatable.
            </summary>
        </member>
        <member name="M:SocketMeister.TokenCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:SocketMeister.TokenCollection.TokenAdded">
            <summary>
            Raised when a token value has added (Token is the source).
            </summary>
        </member>
        <member name="E:SocketMeister.TokenCollection.TokenChanged">
            <summary>
            Raised when a token value has changed (Token is the source).
            </summary>
        </member>
        <member name="E:SocketMeister.TokenCollection.TokenDeleted">
            <summary>
            Raised when a token value was deleted (Token is the source).
            </summary>
        </member>
        <member name="P:SocketMeister.TokenCollection.Item(System.String)">
            <summary>
            Indexed search returning the token or null, for a given token name.
            </summary>
            <param name="Name">Token requested.</param>
            <returns>Found token or null if not found</returns>
        </member>
        <member name="P:SocketMeister.TokenCollection.Count">
            <summary>
            Number of tokens in the token collection
            </summary>
        </member>
        <member name="M:SocketMeister.TokenCollection.Add(SocketMeister.Token)">
            <summary>
            Add a token to the token collection. Throws ArgumentException if Token.Name (case insensitive) already exists.
            </summary>
            <param name="Token">Token to add</param>
        </member>
        <member name="M:SocketMeister.TokenCollection.FlagAllAfterSocketConnect">
            <summary>
            After a socket connects, all tokens are sent to the other side.
            </summary>
        </member>
        <member name="M:SocketMeister.TokenCollection.Remove(System.String)">
            <summary>
            Removes a token from the dictionary
            </summary>
            <param name="Name">Name of the token (Case insensitive)</param>
            <returns>The token which was removed (Null if nothing removed)</returns>
        </member>
        <member name="M:SocketMeister.TokenCollection.ToList">
            <summary>
            Returns a list of all the tokens in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocketMeister.TokenCollection.ToListOfStrings">
            <summary>
            Returns a list of token names
            </summary>
            <returns>List of strings containing the token names.</returns>
        </member>
    </members>
</doc>
