### YamlMime:ManagedReference
items:
- uid: SocketMeister.SocketClient
  commentId: T:SocketMeister.SocketClient
  id: SocketClient
  parent: SocketMeister
  children:
  - SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean)
  - SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean,System.String)
  - SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.Boolean)
  - SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.Boolean,System.String)
  - SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean)
  - SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.String)
  - SocketMeister.SocketClient.AddSubscription(System.String)
  - SocketMeister.SocketClient.BroadcastReceived
  - SocketMeister.SocketClient.ClientId
  - SocketMeister.SocketClient.ConnectionStatus
  - SocketMeister.SocketClient.ConnectionStatusChanged
  - SocketMeister.SocketClient.CurrentEndPoint
  - SocketMeister.SocketClient.CurrentEndPointChanged
  - SocketMeister.SocketClient.Dispose
  - SocketMeister.SocketClient.Dispose(System.Boolean)
  - SocketMeister.SocketClient.DoesSubscriptionNameExist(System.String)
  - SocketMeister.SocketClient.ExceptionRaised
  - SocketMeister.SocketClient.Finalize
  - SocketMeister.SocketClient.FriendlyName
  - SocketMeister.SocketClient.GetSubscriptions
  - SocketMeister.SocketClient.LastMessageFromServer
  - SocketMeister.SocketClient.LogRaised
  - SocketMeister.SocketClient.MessageReceived
  - SocketMeister.SocketClient.RemoveSubscription(System.String)
  - SocketMeister.SocketClient.SendMessage(System.Object[],System.Int32,System.Boolean)
  - SocketMeister.SocketClient.ServerStopping
  - SocketMeister.SocketClient.Stop
  - SocketMeister.SocketClient.SubscriptionCount
  langs:
  - csharp
  - vb
  name: SocketClient
  nameWithType: SocketClient
  fullName: SocketMeister.SocketClient
  type: Class
  source:
    remote:
      path: src/SocketMeister/SocketClient.Events.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: SocketClient
    path: src/SocketMeister/SocketClient.Events.cs
    startLine: 9
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: >-
    Asynchronous, persistent TCP/IP socket client supporting multiple endpoints.

    Implements <xref href="System.IDisposable" data-throw-if-not-resolved="false"></xref>.

    For proper cleanup, see <xref href="SocketMeister.SocketClient.Dispose" data-throw-if-not-resolved="false"></xref> and <xref href="SocketMeister.SocketClient.Dispose(System.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public class SocketClient : IDisposable'
    content.vb: Public Class SocketClient Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: SocketMeister.SocketClient.ConnectionStatusChanged
  commentId: E:SocketMeister.SocketClient.ConnectionStatusChanged
  id: ConnectionStatusChanged
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: ConnectionStatusChanged
  nameWithType: SocketClient.ConnectionStatusChanged
  fullName: SocketMeister.SocketClient.ConnectionStatusChanged
  type: Event
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: ConnectionStatusChanged
    path: src/SocketMeister/SocketClient.cs
    startLine: 80
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Event raised when the status of a socket connection changes.
  example: []
  syntax:
    content: public event EventHandler<EventArgs> ConnectionStatusChanged
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event ConnectionStatusChanged As EventHandler(Of EventArgs)
- uid: SocketMeister.SocketClient.CurrentEndPointChanged
  commentId: E:SocketMeister.SocketClient.CurrentEndPointChanged
  id: CurrentEndPointChanged
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: CurrentEndPointChanged
  nameWithType: SocketClient.CurrentEndPointChanged
  fullName: SocketMeister.SocketClient.CurrentEndPointChanged
  type: Event
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: CurrentEndPointChanged
    path: src/SocketMeister/SocketClient.cs
    startLine: 85
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Event raised when the current endpoint changes.
  example: []
  syntax:
    content: public event EventHandler<EventArgs> CurrentEndPointChanged
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event CurrentEndPointChanged As EventHandler(Of EventArgs)
- uid: SocketMeister.SocketClient.ExceptionRaised
  commentId: E:SocketMeister.SocketClient.ExceptionRaised
  id: ExceptionRaised
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: ExceptionRaised
  nameWithType: SocketClient.ExceptionRaised
  fullName: SocketMeister.SocketClient.ExceptionRaised
  type: Event
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: ExceptionRaised
    path: src/SocketMeister/SocketClient.cs
    startLine: 90
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Event raised when an exception occurs.
  example: []
  syntax:
    content: public event EventHandler<ExceptionEventArgs> ExceptionRaised
    return:
      type: System.EventHandler{SocketMeister.ExceptionEventArgs}
    content.vb: Public Event ExceptionRaised As EventHandler(Of ExceptionEventArgs)
- uid: SocketMeister.SocketClient.MessageReceived
  commentId: E:SocketMeister.SocketClient.MessageReceived
  id: MessageReceived
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: MessageReceived
  nameWithType: SocketClient.MessageReceived
  fullName: SocketMeister.SocketClient.MessageReceived
  type: Event
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: MessageReceived
    path: src/SocketMeister/SocketClient.cs
    startLine: 95
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Raised when a message is received from the server. When processing this event, an optional response can be provided which will be returned to the server.
  example: []
  syntax:
    content: public event EventHandler<SocketClient.MessageReceivedEventArgs> MessageReceived
    return:
      type: System.EventHandler{SocketMeister.SocketClient.MessageReceivedEventArgs}
    content.vb: Public Event MessageReceived As EventHandler(Of SocketClient.MessageReceivedEventArgs)
- uid: SocketMeister.SocketClient.ServerStopping
  commentId: E:SocketMeister.SocketClient.ServerStopping
  id: ServerStopping
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: ServerStopping
  nameWithType: SocketClient.ServerStopping
  fullName: SocketMeister.SocketClient.ServerStopping
  type: Event
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: ServerStopping
    path: src/SocketMeister/SocketClient.cs
    startLine: 100
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Event raised when the server stops.
  example: []
  syntax:
    content: public event EventHandler<EventArgs> ServerStopping
    return:
      type: System.EventHandler{System.EventArgs}
    content.vb: Public Event ServerStopping As EventHandler(Of EventArgs)
- uid: SocketMeister.SocketClient.BroadcastReceived
  commentId: E:SocketMeister.SocketClient.BroadcastReceived
  id: BroadcastReceived
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: BroadcastReceived
  nameWithType: SocketClient.BroadcastReceived
  fullName: SocketMeister.SocketClient.BroadcastReceived
  type: Event
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: BroadcastReceived
    path: src/SocketMeister/SocketClient.cs
    startLine: 105
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Event raised whenever a broadcast is received from the server.
  example: []
  syntax:
    content: public event EventHandler<SocketClient.BroadcastReceivedEventArgs> BroadcastReceived
    return:
      type: System.EventHandler{SocketMeister.SocketClient.BroadcastReceivedEventArgs}
    content.vb: Public Event BroadcastReceived As EventHandler(Of SocketClient.BroadcastReceivedEventArgs)
- uid: SocketMeister.SocketClient.LogRaised
  commentId: E:SocketMeister.SocketClient.LogRaised
  id: LogRaised
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: LogRaised
  nameWithType: SocketClient.LogRaised
  fullName: SocketMeister.SocketClient.LogRaised
  type: Event
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: LogRaised
    path: src/SocketMeister/SocketClient.cs
    startLine: 110
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Raised when a log event has been raised.
  example: []
  syntax:
    content: public event EventHandler<LogEventArgs> LogRaised
    return:
      type: System.EventHandler{SocketMeister.LogEventArgs}
    content.vb: Public Event LogRaised As EventHandler(Of LogEventArgs)
- uid: SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean,System.String)
  commentId: M:SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean,System.String)
  id: '#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean,System.String)'
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SocketClient(List<SocketEndPoint>, bool, string)
  nameWithType: SocketClient.SocketClient(List<SocketEndPoint>, bool, string)
  fullName: SocketMeister.SocketClient.SocketClient(System.Collections.Generic.List<SocketMeister.SocketEndPoint>, bool, string)
  type: Constructor
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: .ctor
    path: src/SocketMeister/SocketClient.cs
    startLine: 120
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Initializes a new instance of the SocketClient class.
  example: []
  syntax:
    content: public SocketClient(List<SocketEndPoint> EndPoints, bool EnableCompression, string friendlyName)
    parameters:
    - id: EndPoints
      type: System.Collections.Generic.List{SocketMeister.SocketEndPoint}
      description: List of endpoints available for connection.
    - id: EnableCompression
      type: System.Boolean
      description: Whether to apply compression to data.
    - id: friendlyName
      type: System.String
      description: Friendly name sent to the server for logging and error reporting purposes.
    content.vb: Public Sub New(EndPoints As List(Of SocketEndPoint), EnableCompression As Boolean, friendlyName As String)
  overload: SocketMeister.SocketClient.#ctor*
  nameWithType.vb: SocketClient.New(List(Of SocketEndPoint), Boolean, String)
  fullName.vb: SocketMeister.SocketClient.New(System.Collections.Generic.List(Of SocketMeister.SocketEndPoint), Boolean, String)
  name.vb: New(List(Of SocketEndPoint), Boolean, String)
- uid: SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean)
  commentId: M:SocketMeister.SocketClient.#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean)
  id: '#ctor(System.Collections.Generic.List{SocketMeister.SocketEndPoint},System.Boolean)'
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SocketClient(List<SocketEndPoint>, bool)
  nameWithType: SocketClient.SocketClient(List<SocketEndPoint>, bool)
  fullName: SocketMeister.SocketClient.SocketClient(System.Collections.Generic.List<SocketMeister.SocketEndPoint>, bool)
  type: Constructor
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: .ctor
    path: src/SocketMeister/SocketClient.cs
    startLine: 170
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Constructor
  example: []
  syntax:
    content: public SocketClient(List<SocketEndPoint> EndPoints, bool EnableCompression)
    parameters:
    - id: EndPoints
      type: System.Collections.Generic.List{SocketMeister.SocketEndPoint}
      description: Collection of endpoints that are available to connect to
    - id: EnableCompression
      type: System.Boolean
      description: Whether compression will be applied to data.
    content.vb: Public Sub New(EndPoints As List(Of SocketEndPoint), EnableCompression As Boolean)
  overload: SocketMeister.SocketClient.#ctor*
  nameWithType.vb: SocketClient.New(List(Of SocketEndPoint), Boolean)
  fullName.vb: SocketMeister.SocketClient.New(System.Collections.Generic.List(Of SocketMeister.SocketEndPoint), Boolean)
  name.vb: New(List(Of SocketEndPoint), Boolean)
- uid: SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.Boolean,System.String)
  commentId: M:SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.Boolean,System.String)
  id: '#ctor(System.String,System.Int32,System.Boolean,System.String)'
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SocketClient(string, int, bool, string)
  nameWithType: SocketClient.SocketClient(string, int, bool, string)
  fullName: SocketMeister.SocketClient.SocketClient(string, int, bool, string)
  type: Constructor
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: .ctor
    path: src/SocketMeister/SocketClient.cs
    startLine: 180
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Constructor
  example: []
  syntax:
    content: public SocketClient(string IPAddress1, int Port1, bool EnableCompression, string FriendlyName)
    parameters:
    - id: IPAddress1
      type: System.String
      description: IP Address to of the SocketMeister server to connect to
    - id: Port1
      type: System.Int32
      description: TCP port the server is listening on
    - id: EnableCompression
      type: System.Boolean
      description: Whether compression will be applied to data.
    - id: FriendlyName
      type: System.String
      description: Friendly name is sent to the SocketServer to be displayed in errors and logging.
    content.vb: Public Sub New(IPAddress1 As String, Port1 As Integer, EnableCompression As Boolean, FriendlyName As String)
  overload: SocketMeister.SocketClient.#ctor*
  nameWithType.vb: SocketClient.New(String, Integer, Boolean, String)
  fullName.vb: SocketMeister.SocketClient.New(String, Integer, Boolean, String)
  name.vb: New(String, Integer, Boolean, String)
- uid: SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.Boolean)
  commentId: M:SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.Boolean)
  id: '#ctor(System.String,System.Int32,System.Boolean)'
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SocketClient(string, int, bool)
  nameWithType: SocketClient.SocketClient(string, int, bool)
  fullName: SocketMeister.SocketClient.SocketClient(string, int, bool)
  type: Constructor
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: .ctor
    path: src/SocketMeister/SocketClient.cs
    startLine: 189
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Constructor
  example: []
  syntax:
    content: public SocketClient(string IPAddress1, int Port1, bool EnableCompression)
    parameters:
    - id: IPAddress1
      type: System.String
      description: IP Address to of the SocketMeister server to connect to
    - id: Port1
      type: System.Int32
      description: TCP port the server is listening on
    - id: EnableCompression
      type: System.Boolean
      description: Whether compression will be applied to data.
    content.vb: Public Sub New(IPAddress1 As String, Port1 As Integer, EnableCompression As Boolean)
  overload: SocketMeister.SocketClient.#ctor*
  nameWithType.vb: SocketClient.New(String, Integer, Boolean)
  fullName.vb: SocketMeister.SocketClient.New(String, Integer, Boolean)
  name.vb: New(String, Integer, Boolean)
- uid: SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.String)
  commentId: M:SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.String)
  id: '#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.String)'
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SocketClient(string, int, string, int, bool, string)
  nameWithType: SocketClient.SocketClient(string, int, string, int, bool, string)
  fullName: SocketMeister.SocketClient.SocketClient(string, int, string, int, bool, string)
  type: Constructor
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: .ctor
    path: src/SocketMeister/SocketClient.cs
    startLine: 203
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Constructor
  example: []
  syntax:
    content: public SocketClient(string IPAddress1, int Port1, string IPAddress2, int Port2, bool EnableCompression, string FriendlyName)
    parameters:
    - id: IPAddress1
      type: System.String
      description: IP Address to of the first SocketMeister server to connect to
    - id: Port1
      type: System.Int32
      description: TCP port the first server is listening on
    - id: IPAddress2
      type: System.String
      description: IP Address to of the second SocketMeister server to connect to
    - id: Port2
      type: System.Int32
      description: TCP port the second server is listening on
    - id: EnableCompression
      type: System.Boolean
      description: Whether compression will be applied to data.
    - id: FriendlyName
      type: System.String
      description: Friendly name is sent to the SocketServer to be displayed in errors and logging.
    content.vb: Public Sub New(IPAddress1 As String, Port1 As Integer, IPAddress2 As String, Port2 As Integer, EnableCompression As Boolean, FriendlyName As String)
  overload: SocketMeister.SocketClient.#ctor*
  nameWithType.vb: SocketClient.New(String, Integer, String, Integer, Boolean, String)
  fullName.vb: SocketMeister.SocketClient.New(String, Integer, String, Integer, Boolean, String)
  name.vb: New(String, Integer, String, Integer, Boolean, String)
- uid: SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean)
  commentId: M:SocketMeister.SocketClient.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean)
  id: '#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean)'
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SocketClient(string, int, string, int, bool)
  nameWithType: SocketClient.SocketClient(string, int, string, int, bool)
  fullName: SocketMeister.SocketClient.SocketClient(string, int, string, int, bool)
  type: Constructor
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: .ctor
    path: src/SocketMeister/SocketClient.cs
    startLine: 222
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Constructor
  example: []
  syntax:
    content: public SocketClient(string IPAddress1, int Port1, string IPAddress2, int Port2, bool EnableCompression)
    parameters:
    - id: IPAddress1
      type: System.String
      description: IP Address to of the first SocketMeister server to connect to
    - id: Port1
      type: System.Int32
      description: TCP port the first server is listening on
    - id: IPAddress2
      type: System.String
      description: IP Address to of the second SocketMeister server to connect to
    - id: Port2
      type: System.Int32
      description: TCP port the second server is listening on
    - id: EnableCompression
      type: System.Boolean
      description: Whether compression will be applied to data.
    content.vb: Public Sub New(IPAddress1 As String, Port1 As Integer, IPAddress2 As String, Port2 As Integer, EnableCompression As Boolean)
  overload: SocketMeister.SocketClient.#ctor*
  nameWithType.vb: SocketClient.New(String, Integer, String, Integer, Boolean)
  fullName.vb: SocketMeister.SocketClient.New(String, Integer, String, Integer, Boolean)
  name.vb: New(String, Integer, String, Integer, Boolean)
- uid: SocketMeister.SocketClient.Dispose
  commentId: M:SocketMeister.SocketClient.Dispose
  id: Dispose
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SocketClient.Dispose()
  fullName: SocketMeister.SocketClient.Dispose()
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: Dispose
    path: src/SocketMeister/SocketClient.cs
    startLine: 241
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Disposes of the resources used by this instance.
  remarks: >-
    This method simply calls <xref href="SocketMeister.SocketClient.Dispose(System.Boolean)" data-throw-if-not-resolved="false"></xref> and then suppresses finalization.

    For more details, see <xref href="SocketMeister.SocketClient.Dispose(System.Boolean)" data-throw-if-not-resolved="false"></xref> and <xref href="System.IDisposable.Dispose" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: SocketMeister.SocketClient.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: SocketMeister.SocketClient.Dispose(System.Boolean)
  commentId: M:SocketMeister.SocketClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: SocketClient.Dispose(bool)
  fullName: SocketMeister.SocketClient.Dispose(bool)
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: Dispose
    path: src/SocketMeister/SocketClient.cs
    startLine: 254
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Disposes of the class resources.
  remarks: See also <xref href="SocketMeister.SocketClient.Dispose" data-throw-if-not-resolved="false"></xref> and <xref href="System.IDisposable.Dispose" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: True if managed resources should be disposed; otherwise, false.
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: SocketMeister.SocketClient.Dispose*
  nameWithType.vb: SocketClient.Dispose(Boolean)
  fullName.vb: SocketMeister.SocketClient.Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: SocketMeister.SocketClient.Finalize
  commentId: M:SocketMeister.SocketClient.Finalize
  id: Finalize
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: ~SocketClient()
  nameWithType: SocketClient.~SocketClient()
  fullName: SocketMeister.SocketClient.~SocketClient()
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: Finalize
    path: src/SocketMeister/SocketClient.cs
    startLine: 295
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Disposes of the resources used by the class.
  example: []
  syntax:
    content: protected ~SocketClient()
    content.vb: 'Protected '
  overload: SocketMeister.SocketClient.Finalize*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: SocketMeister.SocketClient.AddSubscription(System.String)
  commentId: M:SocketMeister.SocketClient.AddSubscription(System.String)
  id: AddSubscription(System.String)
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: AddSubscription(string)
  nameWithType: SocketClient.AddSubscription(string)
  fullName: SocketMeister.SocketClient.AddSubscription(string)
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: AddSubscription
    path: src/SocketMeister/SocketClient.cs
    startLine: 305
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Adds a subscription name to the list of subscriptions. Throws an error if the name (case insensitive) exists.
  example: []
  syntax:
    content: public void AddSubscription(string SubscriptionName)
    parameters:
    - id: SubscriptionName
      type: System.String
      description: ''
    content.vb: Public Sub AddSubscription(SubscriptionName As String)
  overload: SocketMeister.SocketClient.AddSubscription*
  nameWithType.vb: SocketClient.AddSubscription(String)
  fullName.vb: SocketMeister.SocketClient.AddSubscription(String)
  name.vb: AddSubscription(String)
- uid: SocketMeister.SocketClient.LastMessageFromServer
  commentId: P:SocketMeister.SocketClient.LastMessageFromServer
  id: LastMessageFromServer
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: LastMessageFromServer
  nameWithType: SocketClient.LastMessageFromServer
  fullName: SocketMeister.SocketClient.LastMessageFromServer
  type: Property
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: LastMessageFromServer
    path: src/SocketMeister/SocketClient.cs
    startLine: 314
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: The last time any contact was received from the server. This includes polling message/responses, instigated intermittently from the client.
  example: []
  syntax:
    content: public DateTime? LastMessageFromServer { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Public Property LastMessageFromServer As Date?
  overload: SocketMeister.SocketClient.LastMessageFromServer*
- uid: SocketMeister.SocketClient.RemoveSubscription(System.String)
  commentId: M:SocketMeister.SocketClient.RemoveSubscription(System.String)
  id: RemoveSubscription(System.String)
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: RemoveSubscription(string)
  nameWithType: SocketClient.RemoveSubscription(string)
  fullName: SocketMeister.SocketClient.RemoveSubscription(string)
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: RemoveSubscription
    path: src/SocketMeister/SocketClient.cs
    startLine: 325
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Removes a subscription name from the list of subscriptions
  example: []
  syntax:
    content: public bool RemoveSubscription(string SubscriptionName)
    parameters:
    - id: SubscriptionName
      type: System.String
      description: Name of the subscription to remove
    return:
      type: System.Boolean
      description: True if the subscription was removed
    content.vb: Public Function RemoveSubscription(SubscriptionName As String) As Boolean
  overload: SocketMeister.SocketClient.RemoveSubscription*
  nameWithType.vb: SocketClient.RemoveSubscription(String)
  fullName.vb: SocketMeister.SocketClient.RemoveSubscription(String)
  name.vb: RemoveSubscription(String)
- uid: SocketMeister.SocketClient.ClientId
  commentId: P:SocketMeister.SocketClient.ClientId
  id: ClientId
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: ClientId
  nameWithType: SocketClient.ClientId
  fullName: SocketMeister.SocketClient.ClientId
  type: Property
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: ClientId
    path: src/SocketMeister/SocketClient.cs
    startLine: 336
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: GUID identifier for the client, set by the server and sent to the client during connection handshaking
  example: []
  syntax:
    content: public string ClientId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ClientId As String
  overload: SocketMeister.SocketClient.ClientId*
- uid: SocketMeister.SocketClient.ConnectionStatus
  commentId: P:SocketMeister.SocketClient.ConnectionStatus
  id: ConnectionStatus
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: ConnectionStatus
  nameWithType: SocketClient.ConnectionStatus
  fullName: SocketMeister.SocketClient.ConnectionStatus
  type: Property
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: ConnectionStatus
    path: src/SocketMeister/SocketClient.cs
    startLine: 382
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: The connection status of the socket client
  example: []
  syntax:
    content: public SocketClient.ConnectionStatuses ConnectionStatus { get; }
    parameters: []
    return:
      type: SocketMeister.SocketClient.ConnectionStatuses
    content.vb: Public ReadOnly Property ConnectionStatus As SocketClient.ConnectionStatuses
  overload: SocketMeister.SocketClient.ConnectionStatus*
- uid: SocketMeister.SocketClient.FriendlyName
  commentId: P:SocketMeister.SocketClient.FriendlyName
  id: FriendlyName
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: FriendlyName
  nameWithType: SocketClient.FriendlyName
  fullName: SocketMeister.SocketClient.FriendlyName
  type: Property
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: FriendlyName
    path: src/SocketMeister/SocketClient.cs
    startLine: 400
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: A friendly name for the client which can be. If available, the SocketServer will use this in logging and error handling
  example: []
  syntax:
    content: public string FriendlyName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FriendlyName As String
  overload: SocketMeister.SocketClient.FriendlyName*
- uid: SocketMeister.SocketClient.CurrentEndPoint
  commentId: P:SocketMeister.SocketClient.CurrentEndPoint
  id: CurrentEndPoint
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: CurrentEndPoint
  nameWithType: SocketClient.CurrentEndPoint
  fullName: SocketMeister.SocketClient.CurrentEndPoint
  type: Property
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: CurrentEndPoint
    path: src/SocketMeister/SocketClient.cs
    startLine: 463
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: The current socket endpoint which the client is using
  example: []
  syntax:
    content: public SocketEndPoint CurrentEndPoint { get; }
    parameters: []
    return:
      type: SocketMeister.SocketEndPoint
    content.vb: Public Property CurrentEndPoint As SocketEndPoint
  overload: SocketMeister.SocketClient.CurrentEndPoint*
- uid: SocketMeister.SocketClient.SubscriptionCount
  commentId: P:SocketMeister.SocketClient.SubscriptionCount
  id: SubscriptionCount
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SubscriptionCount
  nameWithType: SocketClient.SubscriptionCount
  fullName: SocketMeister.SocketClient.SubscriptionCount
  type: Property
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: SubscriptionCount
    path: src/SocketMeister/SocketClient.cs
    startLine: 534
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: The number of subscriptions for this client
  example: []
  syntax:
    content: public int SubscriptionCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SubscriptionCount As Integer
  overload: SocketMeister.SocketClient.SubscriptionCount*
- uid: SocketMeister.SocketClient.DoesSubscriptionNameExist(System.String)
  commentId: M:SocketMeister.SocketClient.DoesSubscriptionNameExist(System.String)
  id: DoesSubscriptionNameExist(System.String)
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: DoesSubscriptionNameExist(string)
  nameWithType: SocketClient.DoesSubscriptionNameExist(string)
  fullName: SocketMeister.SocketClient.DoesSubscriptionNameExist(string)
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: DoesSubscriptionNameExist
    path: src/SocketMeister/SocketClient.cs
    startLine: 550
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Whether a subscription name exists in the list of subscriptions.
  example: []
  syntax:
    content: public bool DoesSubscriptionNameExist(string SubscriptionName)
    parameters:
    - id: SubscriptionName
      type: System.String
      description: Name of the subscription (Case insensitive).
    return:
      type: System.Boolean
      description: True if exists, false if the subscription does not exist
    content.vb: Public Function DoesSubscriptionNameExist(SubscriptionName As String) As Boolean
  overload: SocketMeister.SocketClient.DoesSubscriptionNameExist*
  nameWithType.vb: SocketClient.DoesSubscriptionNameExist(String)
  fullName.vb: SocketMeister.SocketClient.DoesSubscriptionNameExist(String)
  name.vb: DoesSubscriptionNameExist(String)
- uid: SocketMeister.SocketClient.GetSubscriptions
  commentId: M:SocketMeister.SocketClient.GetSubscriptions
  id: GetSubscriptions
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: GetSubscriptions()
  nameWithType: SocketClient.GetSubscriptions()
  fullName: SocketMeister.SocketClient.GetSubscriptions()
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: GetSubscriptions
    path: src/SocketMeister/SocketClient.cs
    startLine: 561
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Get a list of subscription names
  example: []
  syntax:
    content: public List<string> GetSubscriptions()
    return:
      type: System.Collections.Generic.List{System.String}
      description: List of subscription names
    content.vb: Public Function GetSubscriptions() As List(Of String)
  overload: SocketMeister.SocketClient.GetSubscriptions*
- uid: SocketMeister.SocketClient.Stop
  commentId: M:SocketMeister.SocketClient.Stop
  id: Stop
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: SocketClient.Stop()
  fullName: SocketMeister.SocketClient.Stop()
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: Stop
    path: src/SocketMeister/SocketClient.cs
    startLine: 1072
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Stops the client permenently. There is no option from here to restart without creating a new instance of SocketClient.
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub [Stop]()
  overload: SocketMeister.SocketClient.Stop*
- uid: SocketMeister.SocketClient.SendMessage(System.Object[],System.Int32,System.Boolean)
  commentId: M:SocketMeister.SocketClient.SendMessage(System.Object[],System.Int32,System.Boolean)
  id: SendMessage(System.Object[],System.Int32,System.Boolean)
  parent: SocketMeister.SocketClient
  langs:
  - csharp
  - vb
  name: SendMessage(object[], int, bool)
  nameWithType: SocketClient.SendMessage(object[], int, bool)
  fullName: SocketMeister.SocketClient.SendMessage(object[], int, bool)
  type: Method
  source:
    remote:
      path: src/SocketMeister/SocketClient.cs
      branch: main
      repo: https://github.com/SeanFellowes/SocketMeister
    id: SendMessage
    path: src/SocketMeister/SocketClient.cs
    startLine: 1171
  assemblies:
  - SocketMeister
  namespace: SocketMeister
  summary: Send a message to the server and wait for a response.
  example: []
  syntax:
    content: public byte[] SendMessage(object[] Parameters, int TimeoutMilliseconds = 60000, bool IsLongPolling = false)
    parameters:
    - id: Parameters
      type: System.Object[]
      description: Array of parameters to send with the message
    - id: TimeoutMilliseconds
      type: System.Int32
      description: Maximum number of milliseconds to wait for a response from the server
    - id: IsLongPolling
      type: System.Boolean
      description: If the message is long polling on the server mark this as true and the message will be cancelled instantly when a disconnect occurs
    return:
      type: System.Byte[]
      description: Nullable array of bytes which was returned from the socket server
    content.vb: Public Function SendMessage(Parameters As Object(), TimeoutMilliseconds As Integer = 60000, IsLongPolling As Boolean = False) As Byte()
  overload: SocketMeister.SocketClient.SendMessage*
  nameWithType.vb: SocketClient.SendMessage(Object(), Integer, Boolean)
  fullName.vb: SocketMeister.SocketClient.SendMessage(Object(), Integer, Boolean)
  name.vb: SendMessage(Object(), Integer, Boolean)
references:
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SocketMeister.SocketClient.Dispose
  commentId: M:SocketMeister.SocketClient.Dispose
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Dispose
  name: Dispose()
  nameWithType: SocketClient.Dispose()
  fullName: SocketMeister.SocketClient.Dispose()
  spec.csharp:
  - uid: SocketMeister.SocketClient.Dispose
    name: Dispose
    href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Dispose
  - name: (
  - name: )
  spec.vb:
  - uid: SocketMeister.SocketClient.Dispose
    name: Dispose
    href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Dispose
  - name: (
  - name: )
- uid: SocketMeister.SocketClient.Dispose(System.Boolean)
  commentId: M:SocketMeister.SocketClient.Dispose(System.Boolean)
  isExternal: true
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Dispose_System_Boolean_
  name: Dispose(bool)
  nameWithType: SocketClient.Dispose(bool)
  fullName: SocketMeister.SocketClient.Dispose(bool)
  nameWithType.vb: SocketClient.Dispose(Boolean)
  fullName.vb: SocketMeister.SocketClient.Dispose(Boolean)
  name.vb: Dispose(Boolean)
  spec.csharp:
  - uid: SocketMeister.SocketClient.Dispose(System.Boolean)
    name: Dispose
    href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Dispose_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: SocketMeister.SocketClient.Dispose(System.Boolean)
    name: Dispose
    href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Dispose_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SocketMeister
  commentId: N:SocketMeister
  href: SocketMeister.html
  name: SocketMeister
  nameWithType: SocketMeister
  fullName: SocketMeister
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{System.EventArgs}
  commentId: T:System.EventHandler{System.EventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  nameWithType.vb: EventHandler(Of EventArgs)
  fullName.vb: System.EventHandler(Of System.EventArgs)
  name.vb: EventHandler(Of EventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventargs
  - name: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - name: TEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - name: TEventArgs
  - name: )
- uid: System.EventHandler{SocketMeister.ExceptionEventArgs}
  commentId: T:System.EventHandler{SocketMeister.ExceptionEventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<ExceptionEventArgs>
  nameWithType: EventHandler<ExceptionEventArgs>
  fullName: System.EventHandler<SocketMeister.ExceptionEventArgs>
  nameWithType.vb: EventHandler(Of ExceptionEventArgs)
  fullName.vb: System.EventHandler(Of SocketMeister.ExceptionEventArgs)
  name.vb: EventHandler(Of ExceptionEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: SocketMeister.ExceptionEventArgs
    name: ExceptionEventArgs
    href: SocketMeister.ExceptionEventArgs.html
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: SocketMeister.ExceptionEventArgs
    name: ExceptionEventArgs
    href: SocketMeister.ExceptionEventArgs.html
  - name: )
- uid: System.EventHandler{SocketMeister.SocketClient.MessageReceivedEventArgs}
  commentId: T:System.EventHandler{SocketMeister.SocketClient.MessageReceivedEventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<SocketClient.MessageReceivedEventArgs>
  nameWithType: EventHandler<SocketClient.MessageReceivedEventArgs>
  fullName: System.EventHandler<SocketMeister.SocketClient.MessageReceivedEventArgs>
  nameWithType.vb: EventHandler(Of SocketClient.MessageReceivedEventArgs)
  fullName.vb: System.EventHandler(Of SocketMeister.SocketClient.MessageReceivedEventArgs)
  name.vb: EventHandler(Of SocketClient.MessageReceivedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: SocketMeister.SocketClient
    name: SocketClient
    href: SocketMeister.SocketClient.html
  - name: .
  - uid: SocketMeister.SocketClient.MessageReceivedEventArgs
    name: MessageReceivedEventArgs
    href: SocketMeister.SocketClient.MessageReceivedEventArgs.html
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: SocketMeister.SocketClient
    name: SocketClient
    href: SocketMeister.SocketClient.html
  - name: .
  - uid: SocketMeister.SocketClient.MessageReceivedEventArgs
    name: MessageReceivedEventArgs
    href: SocketMeister.SocketClient.MessageReceivedEventArgs.html
  - name: )
- uid: System.EventHandler{SocketMeister.SocketClient.BroadcastReceivedEventArgs}
  commentId: T:System.EventHandler{SocketMeister.SocketClient.BroadcastReceivedEventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<SocketClient.BroadcastReceivedEventArgs>
  nameWithType: EventHandler<SocketClient.BroadcastReceivedEventArgs>
  fullName: System.EventHandler<SocketMeister.SocketClient.BroadcastReceivedEventArgs>
  nameWithType.vb: EventHandler(Of SocketClient.BroadcastReceivedEventArgs)
  fullName.vb: System.EventHandler(Of SocketMeister.SocketClient.BroadcastReceivedEventArgs)
  name.vb: EventHandler(Of SocketClient.BroadcastReceivedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: SocketMeister.SocketClient
    name: SocketClient
    href: SocketMeister.SocketClient.html
  - name: .
  - uid: SocketMeister.SocketClient.BroadcastReceivedEventArgs
    name: BroadcastReceivedEventArgs
    href: SocketMeister.SocketClient.BroadcastReceivedEventArgs.html
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: SocketMeister.SocketClient
    name: SocketClient
    href: SocketMeister.SocketClient.html
  - name: .
  - uid: SocketMeister.SocketClient.BroadcastReceivedEventArgs
    name: BroadcastReceivedEventArgs
    href: SocketMeister.SocketClient.BroadcastReceivedEventArgs.html
  - name: )
- uid: System.EventHandler{SocketMeister.LogEventArgs}
  commentId: T:System.EventHandler{SocketMeister.LogEventArgs}
  parent: System
  definition: System.EventHandler`1
  href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  name: EventHandler<LogEventArgs>
  nameWithType: EventHandler<LogEventArgs>
  fullName: System.EventHandler<SocketMeister.LogEventArgs>
  nameWithType.vb: EventHandler(Of LogEventArgs)
  fullName.vb: System.EventHandler(Of SocketMeister.LogEventArgs)
  name.vb: EventHandler(Of LogEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: <
  - uid: SocketMeister.LogEventArgs
    name: LogEventArgs
    href: SocketMeister.LogEventArgs.html
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.eventhandler-1
  - name: (
  - name: Of
  - name: " "
  - uid: SocketMeister.LogEventArgs
    name: LogEventArgs
    href: SocketMeister.LogEventArgs.html
  - name: )
- uid: SocketMeister.SocketClient.#ctor*
  commentId: Overload:SocketMeister.SocketClient.#ctor
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient__ctor_System_Collections_Generic_List_SocketMeister_SocketEndPoint__System_Boolean_System_String_
  name: SocketClient
  nameWithType: SocketClient.SocketClient
  fullName: SocketMeister.SocketClient.SocketClient
  nameWithType.vb: SocketClient.New
  fullName.vb: SocketMeister.SocketClient.New
  name.vb: New
- uid: System.Collections.Generic.List{SocketMeister.SocketEndPoint}
  commentId: T:System.Collections.Generic.List{SocketMeister.SocketEndPoint}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<SocketEndPoint>
  nameWithType: List<SocketEndPoint>
  fullName: System.Collections.Generic.List<SocketMeister.SocketEndPoint>
  nameWithType.vb: List(Of SocketEndPoint)
  fullName.vb: System.Collections.Generic.List(Of SocketMeister.SocketEndPoint)
  name.vb: List(Of SocketEndPoint)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: SocketMeister.SocketEndPoint
    name: SocketEndPoint
    href: SocketMeister.SocketEndPoint.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: SocketMeister.SocketEndPoint
    name: SocketEndPoint
    href: SocketMeister.SocketEndPoint.html
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: SocketMeister.SocketClient.Dispose*
  commentId: Overload:SocketMeister.SocketClient.Dispose
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Dispose
  name: Dispose
  nameWithType: SocketClient.Dispose
  fullName: SocketMeister.SocketClient.Dispose
- uid: SocketMeister.SocketClient.Finalize*
  commentId: Overload:SocketMeister.SocketClient.Finalize
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Finalize
  name: ~SocketClient
  nameWithType: SocketClient.~SocketClient
  fullName: SocketMeister.SocketClient.~SocketClient
  spec.csharp:
  - name: "~"
  - uid: SocketMeister.SocketClient.Finalize*
    name: SocketClient
    href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Finalize
- uid: SocketMeister.SocketClient.AddSubscription*
  commentId: Overload:SocketMeister.SocketClient.AddSubscription
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_AddSubscription_System_String_
  name: AddSubscription
  nameWithType: SocketClient.AddSubscription
  fullName: SocketMeister.SocketClient.AddSubscription
- uid: SocketMeister.SocketClient.LastMessageFromServer*
  commentId: Overload:SocketMeister.SocketClient.LastMessageFromServer
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_LastMessageFromServer
  name: LastMessageFromServer
  nameWithType: SocketClient.LastMessageFromServer
  fullName: SocketMeister.SocketClient.LastMessageFromServer
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime?
  nameWithType: DateTime?
  fullName: System.DateTime?
  nameWithType.vb: Date?
  fullName.vb: Date?
  name.vb: Date?
  spec.csharp:
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
  spec.vb:
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SocketMeister.SocketClient.RemoveSubscription*
  commentId: Overload:SocketMeister.SocketClient.RemoveSubscription
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_RemoveSubscription_System_String_
  name: RemoveSubscription
  nameWithType: SocketClient.RemoveSubscription
  fullName: SocketMeister.SocketClient.RemoveSubscription
- uid: SocketMeister.SocketClient.ClientId*
  commentId: Overload:SocketMeister.SocketClient.ClientId
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_ClientId
  name: ClientId
  nameWithType: SocketClient.ClientId
  fullName: SocketMeister.SocketClient.ClientId
- uid: SocketMeister.SocketClient.ConnectionStatus*
  commentId: Overload:SocketMeister.SocketClient.ConnectionStatus
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_ConnectionStatus
  name: ConnectionStatus
  nameWithType: SocketClient.ConnectionStatus
  fullName: SocketMeister.SocketClient.ConnectionStatus
- uid: SocketMeister.SocketClient.ConnectionStatuses
  commentId: T:SocketMeister.SocketClient.ConnectionStatuses
  parent: SocketMeister
  href: SocketMeister.SocketClient.html
  name: SocketClient.ConnectionStatuses
  nameWithType: SocketClient.ConnectionStatuses
  fullName: SocketMeister.SocketClient.ConnectionStatuses
  spec.csharp:
  - uid: SocketMeister.SocketClient
    name: SocketClient
    href: SocketMeister.SocketClient.html
  - name: .
  - uid: SocketMeister.SocketClient.ConnectionStatuses
    name: ConnectionStatuses
    href: SocketMeister.SocketClient.ConnectionStatuses.html
  spec.vb:
  - uid: SocketMeister.SocketClient
    name: SocketClient
    href: SocketMeister.SocketClient.html
  - name: .
  - uid: SocketMeister.SocketClient.ConnectionStatuses
    name: ConnectionStatuses
    href: SocketMeister.SocketClient.ConnectionStatuses.html
- uid: SocketMeister.SocketClient.FriendlyName*
  commentId: Overload:SocketMeister.SocketClient.FriendlyName
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_FriendlyName
  name: FriendlyName
  nameWithType: SocketClient.FriendlyName
  fullName: SocketMeister.SocketClient.FriendlyName
- uid: SocketMeister.SocketClient.CurrentEndPoint*
  commentId: Overload:SocketMeister.SocketClient.CurrentEndPoint
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_CurrentEndPoint
  name: CurrentEndPoint
  nameWithType: SocketClient.CurrentEndPoint
  fullName: SocketMeister.SocketClient.CurrentEndPoint
- uid: SocketMeister.SocketEndPoint
  commentId: T:SocketMeister.SocketEndPoint
  parent: SocketMeister
  href: SocketMeister.SocketEndPoint.html
  name: SocketEndPoint
  nameWithType: SocketEndPoint
  fullName: SocketMeister.SocketEndPoint
- uid: SocketMeister.SocketClient.SubscriptionCount*
  commentId: Overload:SocketMeister.SocketClient.SubscriptionCount
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_SubscriptionCount
  name: SubscriptionCount
  nameWithType: SocketClient.SubscriptionCount
  fullName: SocketMeister.SocketClient.SubscriptionCount
- uid: SocketMeister.SocketClient.DoesSubscriptionNameExist*
  commentId: Overload:SocketMeister.SocketClient.DoesSubscriptionNameExist
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_DoesSubscriptionNameExist_System_String_
  name: DoesSubscriptionNameExist
  nameWithType: SocketClient.DoesSubscriptionNameExist
  fullName: SocketMeister.SocketClient.DoesSubscriptionNameExist
- uid: SocketMeister.SocketClient.GetSubscriptions*
  commentId: Overload:SocketMeister.SocketClient.GetSubscriptions
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_GetSubscriptions
  name: GetSubscriptions
  nameWithType: SocketClient.GetSubscriptions
  fullName: SocketMeister.SocketClient.GetSubscriptions
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SocketMeister.SocketClient.Stop*
  commentId: Overload:SocketMeister.SocketClient.Stop
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_Stop
  name: Stop
  nameWithType: SocketClient.Stop
  fullName: SocketMeister.SocketClient.Stop
- uid: SocketMeister.SocketClient.SendMessage*
  commentId: Overload:SocketMeister.SocketClient.SendMessage
  href: SocketMeister.SocketClient.html#SocketMeister_SocketClient_SendMessage_System_Object___System_Int32_System_Boolean_
  name: SendMessage
  nameWithType: SocketClient.SendMessage
  fullName: SocketMeister.SocketClient.SendMessage
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
